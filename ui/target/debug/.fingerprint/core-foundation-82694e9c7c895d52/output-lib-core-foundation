{"$message_type":"diagnostic","message":"found crate `core_foundation_sys` compiled by an incompatible version of rustc","code":{"code":"E0514","explanation":"Dependency compiled with different version of `rustc`.\n\nExample of erroneous code:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n// compiled with stable `rustc`\n\n#[crate_type = \"lib\"]\n```\n\n`b.rs`\n```ignore (cannot-link-with-other-tests)\n// compiled with nightly `rustc`\n\n#[crate_type = \"lib\"]\n\nextern crate a; // error: found crate `a` compiled by an incompatible version\n                //        of rustc\n```\n\nThis error is caused when the version of `rustc` used to compile a crate, as\nstored in the binary's metadata, differs from the version of one of its\ndependencies. Many parts of Rust binaries are considered unstable. For\ninstance, the Rust ABI is not stable between compiler versions. This means that\nthe compiler cannot be sure about *how* to call a function between compiler\nversions, and therefore this error occurs.\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager and\n   [Rustup](https://rust-lang.github.io/rustup/), the Rust toolchain installer,\n   automatically fixing this issue.\n * Recompiling the crates with a uniform `rustc` version.\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":733,"byte_end":766,"line_start":18,"line_end":18,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"extern crate core_foundation_sys;","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following crate versions were found:\ncrate `core_foundation_sys` compiled by rustc 1.77.0-nightly (595bc6f00 2024-01-05): /Users/nicklopacki/Music/github-projects/xrp-dashboard/ui/target/debug/deps/libcore_foundation_sys-e588fed482a4a92c.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"please recompile that crate using this compiler (rustc 1.77.0-nightly (ca663b06c 2024-01-08)) (consider running `cargo clean` first)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0514]\u001b[0m\u001b[0m\u001b[1m: found crate `core_foundation_sys` compiled by an incompatible version of rustc\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:18:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern crate core_foundation_sys;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following crate versions were found:\u001b[0m\n\u001b[0m           crate `core_foundation_sys` compiled by rustc 1.77.0-nightly (595bc6f00 2024-01-05): /Users/nicklopacki/Music/github-projects/xrp-dashboard/ui/target/debug/deps/libcore_foundation_sys-e588fed482a4a92c.rmeta\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: please recompile that crate using this compiler (rustc 1.77.0-nightly (ca663b06c 2024-01-08)) (consider running `cargo clean` first)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::base::CFRange`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":773,"byte_end":780,"line_start":21,"line_end":21,"column_start":39,"column_end":46,"is_primary":true,"text":[{"text":"use crate::base::{CFIndexConvertible, CFRange, TCFType};","highlight_start":39,"highlight_end":46}],"label":"no `CFRange` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::base::CFRange`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:21:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::base::{CFIndexConvertible, CFRange, TCFType};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFRange` in `base`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::string::CFStringRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":535,"byte_end":546,"line_start":13,"line_end":13,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"use crate::string::{CFString, CFStringRef};","highlight_start":31,"highlight_end":42}],"label":"no `CFStringRef` in `string`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":535,"byte_end":546,"line_start":13,"line_end":13,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"use crate::string::{CFString, CFStringRef};","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":"CFString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::string::CFStringRef`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:13:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::string::{CFString, CFStringRef};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFStringRef` in `string`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `CFString`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::base::CFAllocatorContext`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":1412,"byte_end":1430,"line_start":43,"line_end":43,"column_start":40,"column_end":58,"is_primary":true,"text":[{"text":"        use crate::base::{CFAllocator, CFAllocatorContext};","highlight_start":40,"highlight_end":58}],"label":"no `CFAllocatorContext` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::base::CFAllocatorContext`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:43:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use crate::base::{CFAllocator, CFAllocatorContext};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFAllocatorContext` in `base`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::base::CFIndex`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":552,"byte_end":559,"line_start":17,"line_end":17,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"use crate::base::{CFIndex, TCFType};","highlight_start":19,"highlight_end":26}],"label":"no `CFIndex` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this unresolved item through its public re-export instead:\ncrate::array::CFIndex","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::base::CFIndex`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:17:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::base::{CFIndex, TCFType};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFIndex` in `base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider importing this unresolved item through its public re-export instead:\u001b[0m\n\u001b[0m           crate::array::CFIndex\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":553,"byte_end":563,"line_start":16,"line_end":16,"column_start":36,"column_end":46,"is_primary":true,"text":[{"text":"use crate::base::{CFType, TCFType, TCFTypeRef};","highlight_start":36,"highlight_end":46}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":553,"byte_end":563,"line_start":16,"line_end":16,"column_start":36,"column_end":46,"is_primary":true,"text":[{"text":"use crate::base::{CFType, TCFType, TCFTypeRef};","highlight_start":36,"highlight_end":46}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:16:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::base::{CFType, TCFType, TCFTypeRef};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `crate::date::CFAbsoluteTime`, `crate::date::CFTimeInterval`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":703,"byte_end":717,"line_start":18,"line_end":18,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"use crate::date::{CFAbsoluteTime, CFTimeInterval};","highlight_start":19,"highlight_end":33}],"label":"no `CFAbsoluteTime` in `date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":719,"byte_end":733,"line_start":18,"line_end":18,"column_start":35,"column_end":49,"is_primary":true,"text":[{"text":"use crate::date::{CFAbsoluteTime, CFTimeInterval};","highlight_start":35,"highlight_end":49}],"label":"no `CFTimeInterval` in `date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `crate::date::CFAbsoluteTime`, `crate::date::CFTimeInterval`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:18:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::date::{CFAbsoluteTime, CFTimeInterval};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFTimeInterval` in `date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFAbsoluteTime` in `date`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::date::CFTimeInterval`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":614,"byte_end":628,"line_start":16,"line_end":16,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"use crate::date::{CFDate, CFTimeInterval};","highlight_start":27,"highlight_end":41}],"label":"no `CFTimeInterval` in `date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::date::CFTimeInterval`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:16:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::date::{CFDate, CFTimeInterval};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFTimeInterval` in `date`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::base::CFIndex`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":520,"byte_end":527,"line_start":14,"line_end":14,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"use crate::base::{CFIndex, TCFType};","highlight_start":19,"highlight_end":26}],"label":"no `CFIndex` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this unresolved item through its public re-export instead:\ncrate::array::CFIndex","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::base::CFIndex`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:14:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::base::{CFIndex, TCFType};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `CFIndex` in `base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider importing this unresolved item through its public re-export instead:\u001b[0m\n\u001b[0m           crate::array::CFIndex\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4766,"byte_end":4790,"line_start":144,"line_end":144,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4780,"byte_end":4790,"line_start":144,"line_end":144,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:144:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5015,"byte_end":5039,"line_start":151,"line_end":151,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5029,"byte_end":5039,"line_start":151,"line_end":151,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:151:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `$crate::base::TCFTypeRef`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5268,"byte_end":5292,"line_start":158,"line_end":158,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":21,"highlight_end":45}],"label":"no `TCFTypeRef` in `base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":5282,"byte_end":5292,"line_start":158,"line_end":158,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                use $crate::base::TCFTypeRef;","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":"TCFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `$crate::base::TCFTypeRef`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:158:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                use $crate::base::TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `TCFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TCFTypeRef` in `base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFArrayRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":906,"byte_end":916,"line_start":25,"line_end":25,"column_start":39,"column_end":49,"is_primary":true,"text":[{"text":"pub struct CFArray<T = *const c_void>(CFArrayRef, PhantomData<T>);","highlight_start":39,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFArrayRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:25:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFArray<T = *const c_void>(CFArrayRef, PhantomData<T>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFArrayRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":868,"byte_end":934,"line_start":25,"line_end":25,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub struct CFArray<T = *const c_void>(CFArrayRef, PhantomData<T>);","highlight_start":1,"highlight_end":67}],"label":"similarly named struct `CFArray` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1699,"byte_end":1709,"line_start":59,"line_end":59,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1699,"byte_end":1709,"line_start":59,"line_end":59,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":"CFArray","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFArrayRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFArray<T = *const c_void>(CFArrayRef, PhantomData<T>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFArray` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFArray`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1673,"byte_end":1728,"line_start":59,"line_end":59,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFTypeArrayCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":2789,"byte_end":2810,"line_start":92,"line_end":92,"column_start":18,"column_end":39,"is_primary":true,"text":[{"text":"                &kCFTypeArrayCallBacks,","highlight_start":18,"highlight_end":39}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFTypeArrayCallBacks` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:92:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &kCFTypeArrayCallBacks,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAttributedStringRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":685,"byte_end":706,"line_start":18,"line_end":18,"column_start":25,"column_end":46,"is_primary":true,"text":[{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":25,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":685,"byte_end":706,"line_start":18,"line_end":18,"column_start":25,"column_end":46,"is_primary":true,"text":[{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":25,"highlight_end":46}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAttributedStringRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:18:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString, CFAttributedStringRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:17:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString, CFAttributedStringRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAttributedStringRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":752,"byte_end":773,"line_start":22,"line_end":22,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    CFAttributedStringRef,","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":752,"byte_end":773,"line_start":22,"line_end":22,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    CFAttributedStringRef,","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAttributedStringRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":709,"byte_end":808,"line_start":20,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFAttributedString,","highlight_start":1,"highlight_end":24},{"text":"    CFAttributedStringRef,","highlight_start":1,"highlight_end":27},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMutableAttributedStringRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFMutableAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1241,"byte_end":1321,"line_start":43,"line_end":45,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFMutableAttributedString, CFMutableAttributedStringRef","highlight_start":1,"highlight_end":60},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1291,"byte_end":1319,"line_start":44,"line_end":44,"column_start":32,"column_end":60,"is_primary":true,"text":[{"text":"    CFMutableAttributedString, CFMutableAttributedStringRef","highlight_start":32,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1291,"byte_end":1319,"line_start":44,"line_end":44,"column_start":32,"column_end":60,"is_primary":true,"text":[{"text":"    CFMutableAttributedString, CFMutableAttributedStringRef","highlight_start":32,"highlight_end":60}],"label":null,"suggested_replacement":"CFMutableAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMutableAttributedStringRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:44:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString, CFMutableAttributedStringRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFMutableAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFMutableAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1241,"byte_end":1321,"line_start":43,"line_end":45,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFMutableAttributedString, CFMutableAttributedStringRef","highlight_start":1,"highlight_end":60},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:43:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString, CFMutableAttributedStringRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMutableAttributedStringRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFMutableAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1241,"byte_end":1321,"line_start":43,"line_end":45,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFMutableAttributedString, CFMutableAttributedStringRef","highlight_start":1,"highlight_end":60},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1372,"byte_end":1400,"line_start":48,"line_end":48,"column_start":5,"column_end":33,"is_primary":true,"text":[{"text":"    CFMutableAttributedStringRef,","highlight_start":5,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1372,"byte_end":1400,"line_start":48,"line_end":48,"column_start":5,"column_end":33,"is_primary":true,"text":[{"text":"    CFMutableAttributedStringRef,","highlight_start":5,"highlight_end":33}],"label":null,"suggested_replacement":"CFMutableAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMutableAttributedStringRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:48:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFMutableAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFMutableAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1322,"byte_end":1435,"line_start":46,"line_end":50,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFMutableAttributedString,","highlight_start":1,"highlight_end":31},{"text":"    CFMutableAttributedStringRef,","highlight_start":1,"highlight_end":34},{"text":"    CFAttributedStringGetTypeID","highlight_start":1,"highlight_end":32},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedString,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableAttributedStringRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFIndex` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":868,"byte_end":875,"line_start":26,"line_end":26,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"    fn to_CFIndex(self) -> CFIndex;","highlight_start":28,"highlight_end":35}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFIndex` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:26:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_CFIndex(self) -> CFIndex;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFIndex` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":957,"byte_end":964,"line_start":31,"line_end":31,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"    fn to_CFIndex(self) -> CFIndex {","highlight_start":28,"highlight_end":35}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFIndex` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:31:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_CFIndex(self) -> CFIndex {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFIndex` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1125,"byte_end":1132,"line_start":36,"line_end":36,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        self as CFIndex","highlight_start":17,"highlight_end":24}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFIndex` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:36:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self as CFIndex\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1224,"byte_end":1233,"line_start":42,"line_end":42,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFType, CFTypeRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1224,"byte_end":1233,"line_start":42,"line_end":42,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFType, CFTypeRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:42:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFType, CFTypeRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:40:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Superclass of all Core Foundation objects.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFType, CFTypeRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAllocatorRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFAllocator` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4516,"byte_end":4561,"line_start":137,"line_end":137,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"declare_TCFType!(CFAllocator, CFAllocatorRef);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4546,"byte_end":4560,"line_start":137,"line_end":137,"column_start":31,"column_end":45,"is_primary":true,"text":[{"text":"declare_TCFType!(CFAllocator, CFAllocatorRef);","highlight_start":31,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4546,"byte_end":4560,"line_start":137,"line_end":137,"column_start":31,"column_end":45,"is_primary":true,"text":[{"text":"declare_TCFType!(CFAllocator, CFAllocatorRef);","highlight_start":31,"highlight_end":45}],"label":null,"suggested_replacement":"CFAllocator","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAllocatorRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:137:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFAllocator, CFAllocatorRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFAllocator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFAllocator` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4516,"byte_end":4561,"line_start":137,"line_end":137,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"declare_TCFType!(CFAllocator, CFAllocatorRef);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:137:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFAllocator, CFAllocatorRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAllocatorRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFAllocator` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4516,"byte_end":4561,"line_start":137,"line_end":137,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"declare_TCFType!(CFAllocator, CFAllocatorRef);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4590,"byte_end":4604,"line_start":138,"line_end":138,"column_start":28,"column_end":42,"is_primary":true,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":28,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4590,"byte_end":4604,"line_start":138,"line_end":138,"column_start":28,"column_end":42,"is_primary":true,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":28,"highlight_end":42}],"label":null,"suggested_replacement":"CFAllocator","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAllocatorRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFAllocator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFAllocator` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4563,"byte_end":4627,"line_start":138,"line_end":138,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAllocatorContext` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4691,"byte_end":4709,"line_start":142,"line_end":142,"column_start":29,"column_end":47,"is_primary":true,"text":[{"text":"    pub fn new(mut context: CFAllocatorContext) -> CFAllocator {","highlight_start":29,"highlight_end":47}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAllocatorContext` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:142:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(mut context: CFAllocatorContext) -> CFAllocator {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFAllocatorDefault` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4795,"byte_end":4814,"line_start":144,"line_end":144,"column_start":51,"column_end":70,"is_primary":true,"text":[{"text":"            let allocator_ref = CFAllocatorCreate(kCFAllocatorDefault, &mut context);","highlight_start":51,"highlight_end":70}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFAllocatorDefault` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:144:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let allocator_ref = CFAllocatorCreate(kCFAllocatorDefault, &mut context);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find trait `TCFTypeRef` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":5347,"byte_end":5357,"line_start":159,"line_end":159,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"    type Ref: TCFTypeRef;","highlight_start":15,"highlight_end":25}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `TCFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:159:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Ref: TCFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":5781,"byte_end":5789,"line_start":169,"line_end":169,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"    fn type_id() -> CFTypeID;","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":5781,"byte_end":5789,"line_start":169,"line_end":169,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"    fn type_id() -> CFTypeID;","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:169:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn type_id() -> CFTypeID;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":6467,"byte_end":6476,"line_start":190,"line_end":190,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"    fn as_CFTypeRef(&self) -> CFTypeRef;","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":6467,"byte_end":6476,"line_start":190,"line_end":190,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"    fn as_CFTypeRef(&self) -> CFTypeRef;","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:190:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_CFTypeRef(&self) -> CFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFIndex` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":6938,"byte_end":6945,"line_start":199,"line_end":199,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"    fn retain_count(&self) -> CFIndex {","highlight_start":31,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFIndex` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:199:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn retain_count(&self) -> CFIndex {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7095,"byte_end":7103,"line_start":205,"line_end":205,"column_start":26,"column_end":34,"is_primary":true,"text":[{"text":"    fn type_of(&self) -> CFTypeID {","highlight_start":26,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7095,"byte_end":7103,"line_start":205,"line_end":205,"column_start":26,"column_end":34,"is_primary":true,"text":[{"text":"    fn type_of(&self) -> CFTypeID {","highlight_start":26,"highlight_end":34}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:205:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn type_of(&self) -> CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7549,"byte_end":7558,"line_start":222,"line_end":222,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    type Ref = CFTypeRef;","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7549,"byte_end":7558,"line_start":222,"line_end":222,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    type Ref = CFTypeRef;","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:222:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Ref = CFTypeRef;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7612,"byte_end":7621,"line_start":225,"line_end":225,"column_start":38,"column_end":47,"is_primary":true,"text":[{"text":"    fn as_concrete_TypeRef(&self) -> CFTypeRef {","highlight_start":38,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7612,"byte_end":7621,"line_start":225,"line_end":225,"column_start":38,"column_end":47,"is_primary":true,"text":[{"text":"    fn as_concrete_TypeRef(&self) -> CFTypeRef {","highlight_start":38,"highlight_end":47}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:225:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_concrete_TypeRef(&self) -> CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7705,"byte_end":7714,"line_start":230,"line_end":230,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"    unsafe fn wrap_under_get_rule(reference: CFTypeRef) -> CFType {","highlight_start":46,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7705,"byte_end":7714,"line_start":230,"line_end":230,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"    unsafe fn wrap_under_get_rule(reference: CFTypeRef) -> CFType {","highlight_start":46,"highlight_end":55}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:230:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn wrap_under_get_rule(reference: CFTypeRef) -> CFType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7828,"byte_end":7837,"line_start":232,"line_end":232,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        let reference: CFTypeRef = CFRetain(reference);","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7828,"byte_end":7837,"line_start":232,"line_end":232,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        let reference: CFTypeRef = CFRetain(reference);","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:232:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let reference: CFTypeRef = CFRetain(reference);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7963,"byte_end":7972,"line_start":237,"line_end":237,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"    fn as_CFTypeRef(&self) -> CFTypeRef {","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7963,"byte_end":7972,"line_start":237,"line_end":237,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"    fn as_CFTypeRef(&self) -> CFTypeRef {","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:237:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_CFTypeRef(&self) -> CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":8073,"byte_end":8082,"line_start":242,"line_end":242,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"    unsafe fn wrap_under_create_rule(obj: CFTypeRef) -> CFType {","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":8073,"byte_end":8082,"line_start":242,"line_end":242,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"    unsafe fn wrap_under_create_rule(obj: CFTypeRef) -> CFType {","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:242:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn wrap_under_create_rule(obj: CFTypeRef) -> CFType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":8228,"byte_end":8236,"line_start":248,"line_end":248,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"    fn type_id() -> CFTypeID {","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":8228,"byte_end":8236,"line_start":248,"line_end":248,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"    fn type_id() -> CFTypeID {","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:248:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn type_id() -> CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":11919,"byte_end":11928,"line_start":387,"line_end":387,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"unsafe impl ToVoid<CFType> for CFTypeRef {","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":11919,"byte_end":11928,"line_start":387,"line_end":387,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"unsafe impl ToVoid<CFType> for CFTypeRef {","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:387:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0munsafe impl ToVoid<CFType> for CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":589,"byte_end":765,"line_start":18,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A Boolean type.","highlight_start":1,"highlight_end":24},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// FIXME(pcwalton): Should be a newtype struct, but that fails due to a Rust compiler bug.","highlight_start":1,"highlight_end":96},{"text":"    CFBoolean, CFBooleanRef","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:18:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A Boolean type.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// FIXME(pcwalton): Should be a newtype struct, but that fails due to a Rust compiler bug.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFBoolean, CFBooleanRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs","byte_start":766,"byte_end":824,"line_start":24,"line_end":24,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/boolean.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBoolean, CFBooleanRef, CFBooleanGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFBundleRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFBundle` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":781,"byte_end":850,"line_start":23,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A Bundle type.","highlight_start":1,"highlight_end":23},{"text":"    CFBundle, CFBundleRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":837,"byte_end":848,"line_start":25,"line_end":25,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"    CFBundle, CFBundleRef","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":837,"byte_end":848,"line_start":25,"line_end":25,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"    CFBundle, CFBundleRef","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":"CFBundle","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFBundleRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:25:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFBundle, CFBundleRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFBundle`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFBundle` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":781,"byte_end":850,"line_start":23,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A Bundle type.","highlight_start":1,"highlight_end":23},{"text":"    CFBundle, CFBundleRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A Bundle type.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFBundle, CFBundleRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFBundleRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFBundle` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":781,"byte_end":850,"line_start":23,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A Bundle type.","highlight_start":1,"highlight_end":23},{"text":"    CFBundle, CFBundleRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":875,"byte_end":886,"line_start":27,"line_end":27,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":875,"byte_end":886,"line_start":27,"line_end":27,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"CFBundle","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFBundleRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFBundle`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFBundle` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":851,"byte_end":906,"line_start":27,"line_end":27,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFCharacterSetRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFCharacterSet` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":545,"byte_end":650,"line_start":16,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable set of Unicde characters.","highlight_start":1,"highlight_end":47},{"text":"    CFCharacterSet, CFCharacterSetRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":631,"byte_end":648,"line_start":18,"line_end":18,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    CFCharacterSet, CFCharacterSetRef","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":631,"byte_end":648,"line_start":18,"line_end":18,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    CFCharacterSet, CFCharacterSetRef","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":"CFCharacterSet","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFCharacterSetRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:18:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFCharacterSet, CFCharacterSetRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFCharacterSet`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFCharacterSet` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":545,"byte_end":650,"line_start":16,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable set of Unicde characters.","highlight_start":1,"highlight_end":47},{"text":"    CFCharacterSet, CFCharacterSetRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:16:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An immutable set of Unicde characters.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFCharacterSet, CFCharacterSetRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFCharacterSetRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFCharacterSet` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":545,"byte_end":650,"line_start":16,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable set of Unicde characters.","highlight_start":1,"highlight_end":47},{"text":"    CFCharacterSet, CFCharacterSetRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":681,"byte_end":698,"line_start":20,"line_end":20,"column_start":31,"column_end":48,"is_primary":true,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":31,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":681,"byte_end":698,"line_start":20,"line_end":20,"column_start":31,"column_end":48,"is_primary":true,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":31,"highlight_end":48}],"label":null,"suggested_replacement":"CFCharacterSet","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFCharacterSetRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFCharacterSet`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFCharacterSet` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":651,"byte_end":724,"line_start":20,"line_end":20,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFDataRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFData` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":699,"byte_end":764,"line_start":21,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A byte buffer.","highlight_start":1,"highlight_end":23},{"text":"    CFData, CFDataRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":753,"byte_end":762,"line_start":23,"line_end":23,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFData, CFDataRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":753,"byte_end":762,"line_start":23,"line_end":23,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFData, CFDataRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"CFData","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFDataRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:23:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFData, CFDataRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFData`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFData` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":699,"byte_end":764,"line_start":21,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A byte buffer.","highlight_start":1,"highlight_end":23},{"text":"    CFData, CFDataRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:21:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A byte buffer.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFData, CFDataRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFDataRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFData` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":699,"byte_end":764,"line_start":21,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A byte buffer.","highlight_start":1,"highlight_end":23},{"text":"    CFData, CFDataRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":787,"byte_end":796,"line_start":25,"line_end":25,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":787,"byte_end":796,"line_start":25,"line_end":25,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":"CFData","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFDataRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFData`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFData` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":765,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFDateRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFDate` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":640,"byte_end":698,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A date.","highlight_start":1,"highlight_end":16},{"text":"    CFDate, CFDateRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":687,"byte_end":696,"line_start":22,"line_end":22,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFDate, CFDateRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":687,"byte_end":696,"line_start":22,"line_end":22,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFDate, CFDateRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"CFDate","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFDateRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:22:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFDate, CFDateRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFDate` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":640,"byte_end":698,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A date.","highlight_start":1,"highlight_end":16},{"text":"    CFDate, CFDateRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:20:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A date.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFDate, CFDateRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFDateRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFDate` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":640,"byte_end":698,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A date.","highlight_start":1,"highlight_end":16},{"text":"    CFDate, CFDateRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":721,"byte_end":730,"line_start":24,"line_end":24,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":721,"byte_end":730,"line_start":24,"line_end":24,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":"CFDate","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFDateRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFDate` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":699,"byte_end":748,"line_start":24,"line_end":24,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAbsoluteTime` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":876,"byte_end":890,"line_start":30,"line_end":30,"column_start":22,"column_end":36,"is_primary":true,"text":[{"text":"    pub fn new(time: CFAbsoluteTime) -> CFDate {","highlight_start":22,"highlight_end":36}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAbsoluteTime` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:30:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(time: CFAbsoluteTime) -> CFDate {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFAbsoluteTime` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":1213,"byte_end":1227,"line_start":43,"line_end":43,"column_start":31,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn abs_time(&self) -> CFAbsoluteTime {","highlight_start":31,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFAbsoluteTime` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:43:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn abs_time(&self) -> CFAbsoluteTime {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFDictionaryRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":909,"byte_end":924,"line_start":26,"line_end":26,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    CFDictionaryRef,","highlight_start":5,"highlight_end":20}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFDictionaryRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:26:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFDictionaryRef,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFDictionaryRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":842,"byte_end":968,"line_start":25,"line_end":29,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub struct CFDictionary<K = *const c_void, V = *const c_void>(","highlight_start":1,"highlight_end":63},{"text":"    CFDictionaryRef,","highlight_start":1,"highlight_end":21},{"text":"    PhantomData<K>,","highlight_start":1,"highlight_end":20},{"text":"    PhantomData<V>,","highlight_start":1,"highlight_end":20},{"text":");","highlight_start":1,"highlight_end":3}],"label":"similarly named struct `CFDictionary` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1129,"byte_end":1144,"line_start":37,"line_end":37,"column_start":35,"column_end":50,"is_primary":true,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":35,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1129,"byte_end":1144,"line_start":37,"line_end":37,"column_start":35,"column_end":50,"is_primary":true,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":35,"highlight_end":50}],"label":null,"suggested_replacement":"CFDictionary","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFDictionaryRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFDictionary<K = *const c_void, V = *const c_void>(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFDictionaryRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<K>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<V>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFDictionary` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFDictionary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1095,"byte_end":1168,"line_start":37,"line_end":37,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFTypeDictionaryKeyCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1868,"byte_end":1897,"line_start":59,"line_end":59,"column_start":18,"column_end":47,"is_primary":true,"text":[{"text":"                &kCFTypeDictionaryKeyCallBacks,","highlight_start":18,"highlight_end":47}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFTypeDictionaryKeyCallBacks` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:59:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &kCFTypeDictionaryKeyCallBacks,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFTypeDictionaryValueCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1916,"byte_end":1947,"line_start":60,"line_end":60,"column_start":18,"column_end":49,"is_primary":true,"text":[{"text":"                &kCFTypeDictionaryValueCallBacks,","highlight_start":18,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFTypeDictionaryValueCallBacks` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:60:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &kCFTypeDictionaryValueCallBacks,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMutableDictionaryRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4588,"byte_end":4728,"line_start":152,"line_end":156,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub struct CFMutableDictionary<K = *const c_void, V = *const c_void>(","highlight_start":1,"highlight_end":70},{"text":"    CFMutableDictionaryRef,","highlight_start":1,"highlight_end":28},{"text":"    PhantomData<K>,","highlight_start":1,"highlight_end":20},{"text":"    PhantomData<V>,","highlight_start":1,"highlight_end":20},{"text":");","highlight_start":1,"highlight_end":3}],"label":"similarly named struct `CFMutableDictionary` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":2492,"byte_end":2514,"line_start":75,"line_end":75,"column_start":60,"column_end":82,"is_primary":true,"text":[{"text":"        CFMutableDictionary::wrap_under_get_rule(self.0 as CFMutableDictionaryRef)","highlight_start":60,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":2492,"byte_end":2514,"line_start":75,"line_end":75,"column_start":60,"column_end":82,"is_primary":true,"text":[{"text":"        CFMutableDictionary::wrap_under_get_rule(self.0 as CFMutableDictionaryRef)","highlight_start":60,"highlight_end":82}],"label":null,"suggested_replacement":"CFMutableDictionary","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMutableDictionaryRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:75:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        CFMutableDictionary::wrap_under_get_rule(self.0 as CFMutableDictionaryRef)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFMutableDictionary`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFMutableDictionary<K = *const c_void, V = *const c_void>(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableDictionaryRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<K>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<V>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFMutableDictionary` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMutableDictionaryRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4662,"byte_end":4684,"line_start":153,"line_end":153,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    CFMutableDictionaryRef,","highlight_start":5,"highlight_end":27}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMutableDictionaryRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:153:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableDictionaryRef,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMutableDictionaryRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4588,"byte_end":4728,"line_start":152,"line_end":156,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub struct CFMutableDictionary<K = *const c_void, V = *const c_void>(","highlight_start":1,"highlight_end":70},{"text":"    CFMutableDictionaryRef,","highlight_start":1,"highlight_end":28},{"text":"    PhantomData<K>,","highlight_start":1,"highlight_end":20},{"text":"    PhantomData<V>,","highlight_start":1,"highlight_end":20},{"text":");","highlight_start":1,"highlight_end":3}],"label":"similarly named struct `CFMutableDictionary` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4903,"byte_end":4925,"line_start":164,"line_end":164,"column_start":42,"column_end":64,"is_primary":true,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":42,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4903,"byte_end":4925,"line_start":164,"line_end":164,"column_start":42,"column_end":64,"is_primary":true,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":42,"highlight_end":64}],"label":null,"suggested_replacement":"CFMutableDictionary","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMutableDictionaryRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFMutableDictionary<K = *const c_void, V = *const c_void>(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMutableDictionaryRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<K>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<V>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFMutableDictionary` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFMutableDictionary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4862,"byte_end":4949,"line_start":164,"line_end":164,"column_start":1,"column_end":88,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFTypeDictionaryKeyCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":5316,"byte_end":5345,"line_start":177,"line_end":177,"column_start":18,"column_end":47,"is_primary":true,"text":[{"text":"                &kCFTypeDictionaryKeyCallBacks,","highlight_start":18,"highlight_end":47}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFTypeDictionaryKeyCallBacks` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:177:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &kCFTypeDictionaryKeyCallBacks,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFTypeDictionaryValueCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":5364,"byte_end":5395,"line_start":178,"line_end":178,"column_start":18,"column_end":49,"is_primary":true,"text":[{"text":"                &kCFTypeDictionaryValueCallBacks,","highlight_start":18,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFTypeDictionaryValueCallBacks` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:178:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &kCFTypeDictionaryValueCallBacks,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFErrorRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFError` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":601,"byte_end":669,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An error value.","highlight_start":1,"highlight_end":24},{"text":"    CFError, CFErrorRef","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":657,"byte_end":667,"line_start":22,"line_end":22,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    CFError, CFErrorRef","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":657,"byte_end":667,"line_start":22,"line_end":22,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    CFError, CFErrorRef","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":"CFError","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFErrorRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:22:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFError, CFErrorRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFError` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":601,"byte_end":669,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An error value.","highlight_start":1,"highlight_end":24},{"text":"    CFError, CFErrorRef","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:20:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An error value.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFError, CFErrorRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFErrorRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFError` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":601,"byte_end":669,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An error value.","highlight_start":1,"highlight_end":24},{"text":"    CFError, CFErrorRef","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":693,"byte_end":703,"line_start":24,"line_end":24,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":24,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":693,"byte_end":703,"line_start":24,"line_end":24,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":24,"highlight_end":34}],"label":null,"suggested_replacement":"CFError","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFErrorRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFError` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":670,"byte_end":722,"line_start":24,"line_end":24,"column_start":1,"column_end":53,"is_primary":false,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFFileDescriptorRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":785,"byte_end":804,"line_start":23,"line_end":23,"column_start":23,"column_end":42,"is_primary":true,"text":[{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":785,"byte_end":804,"line_start":23,"line_end":23,"column_start":23,"column_end":42,"is_primary":true,"text":[{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":23,"highlight_end":42}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFFileDescriptorRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:23:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor, CFFileDescriptorRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFFileDescriptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFFileDescriptor` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:22:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor, CFFileDescriptorRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFFileDescriptorRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":848,"byte_end":867,"line_start":27,"line_end":27,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    CFFileDescriptorRef,","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":848,"byte_end":867,"line_start":27,"line_end":27,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    CFFileDescriptorRef,","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFFileDescriptorRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFFileDescriptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFFileDescriptor` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":807,"byte_end":900,"line_start":25,"line_end":29,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFFileDescriptor,","highlight_start":1,"highlight_end":22},{"text":"    CFFileDescriptorRef,","highlight_start":1,"highlight_end":25},{"text":"    CFFileDescriptorGetTypeID","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFFileDescriptorCallBack` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1012,"byte_end":1036,"line_start":35,"line_end":35,"column_start":18,"column_end":42,"is_primary":true,"text":[{"text":"        callout: CFFileDescriptorCallBack,","highlight_start":18,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1012,"byte_end":1036,"line_start":35,"line_end":35,"column_start":18,"column_end":42,"is_primary":true,"text":[{"text":"        callout: CFFileDescriptorCallBack,","highlight_start":18,"highlight_end":42}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFFileDescriptorCallBack` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:35:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        callout: CFFileDescriptorCallBack,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFFileDescriptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFFileDescriptor` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFFileDescriptorContext` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1063,"byte_end":1086,"line_start":36,"line_end":36,"column_start":26,"column_end":49,"is_primary":true,"text":[{"text":"        context: Option<&CFFileDescriptorContext>,","highlight_start":26,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1063,"byte_end":1086,"line_start":36,"line_end":36,"column_start":26,"column_end":49,"is_primary":true,"text":[{"text":"        context: Option<&CFFileDescriptorContext>,","highlight_start":26,"highlight_end":49}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"you might be missing a type parameter","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":907,"byte_end":907,"line_start":31,"line_end":31,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"impl CFFileDescriptor {","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"<CFFileDescriptorContext>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFFileDescriptorContext` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:36:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        context: Option<&CFFileDescriptorContext>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFFileDescriptor` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a struct with a similar name exists\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        context: Option<&\u001b[0m\u001b[0m\u001b[38;5;10mCFFileDescriptor\u001b[0m\u001b[0m>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might be missing a type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl\u001b[0m\u001b[0m\u001b[38;5;10m<CFFileDescriptorContext>\u001b[0m\u001b[0m CFFileDescriptor {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFFileDescriptorContext` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1627,"byte_end":1650,"line_start":55,"line_end":55,"column_start":30,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn context(&self) -> CFFileDescriptorContext {","highlight_start":30,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1627,"byte_end":1650,"line_start":55,"line_end":55,"column_start":30,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn context(&self) -> CFFileDescriptorContext {","highlight_start":30,"highlight_end":53}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFFileDescriptorContext` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:55:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn context(&self) -> CFFileDescriptorContext {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFFileDescriptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFFileDescriptor` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFFileDescriptorContext` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1714,"byte_end":1737,"line_start":57,"line_end":57,"column_start":45,"column_end":68,"is_primary":true,"text":[{"text":"            let mut context = MaybeUninit::<CFFileDescriptorContext>::uninit();","highlight_start":45,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1714,"byte_end":1737,"line_start":57,"line_end":57,"column_start":45,"column_end":68,"is_primary":true,"text":[{"text":"            let mut context = MaybeUninit::<CFFileDescriptorContext>::uninit();","highlight_start":45,"highlight_end":68}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"you might be missing a type parameter","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":907,"byte_end":907,"line_start":31,"line_end":31,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"impl CFFileDescriptor {","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"<CFFileDescriptorContext>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFFileDescriptorContext` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:57:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut context = MaybeUninit::<CFFileDescriptorContext>::uninit();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFFileDescriptor` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a struct with a similar name exists\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let mut context = MaybeUninit::<\u001b[0m\u001b[0m\u001b[38;5;10mCFFileDescriptor\u001b[0m\u001b[0m>::uninit();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might be missing a type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl\u001b[0m\u001b[0m\u001b[38;5;10m<CFFileDescriptorContext>\u001b[0m\u001b[0m CFFileDescriptor {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMachPortRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFMachPort` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":159,"byte_end":245,"line_start":6,"line_end":9,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable numeric value.","highlight_start":1,"highlight_end":36},{"text":"    CFMachPort, CFMachPortRef","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":230,"byte_end":243,"line_start":8,"line_end":8,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    CFMachPort, CFMachPortRef","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":230,"byte_end":243,"line_start":8,"line_end":8,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    CFMachPort, CFMachPortRef","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"CFMachPort","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMachPortRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:8:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMachPort, CFMachPortRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFMachPort`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFMachPort` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":159,"byte_end":245,"line_start":6,"line_end":9,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable numeric value.","highlight_start":1,"highlight_end":36},{"text":"    CFMachPort, CFMachPortRef","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An immutable numeric value.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFMachPort, CFMachPortRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFMachPortRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFMachPort` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":159,"byte_end":245,"line_start":6,"line_end":9,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable numeric value.","highlight_start":1,"highlight_end":36},{"text":"    CFMachPort, CFMachPortRef","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":272,"byte_end":285,"line_start":10,"line_end":10,"column_start":27,"column_end":40,"is_primary":true,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":27,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":272,"byte_end":285,"line_start":10,"line_end":10,"column_start":27,"column_end":40,"is_primary":true,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":27,"highlight_end":40}],"label":null,"suggested_replacement":"CFMachPort","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFMachPortRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFMachPort`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFMachPort` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":246,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFIndex` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":412,"byte_end":419,"line_start":14,"line_end":14,"column_start":48,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn create_runloop_source(&self, order: CFIndex) -> Result<CFRunLoopSource, ()> {","highlight_start":48,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFIndex` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:14:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn create_runloop_source(&self, order: CFIndex) -> Result<CFRunLoopSource, ()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFNumberRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFNumber` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":597,"byte_end":679,"line_start":18,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable numeric value.","highlight_start":1,"highlight_end":36},{"text":"    CFNumber, CFNumberRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":666,"byte_end":677,"line_start":20,"line_end":20,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"    CFNumber, CFNumberRef","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":666,"byte_end":677,"line_start":20,"line_end":20,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"    CFNumber, CFNumberRef","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":"CFNumber","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFNumberRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:20:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFNumber, CFNumberRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFNumber`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFNumber` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":597,"byte_end":679,"line_start":18,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable numeric value.","highlight_start":1,"highlight_end":36},{"text":"    CFNumber, CFNumberRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:18:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An immutable numeric value.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFNumber, CFNumberRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFNumberRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFNumber` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":597,"byte_end":679,"line_start":18,"line_end":21,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable numeric value.","highlight_start":1,"highlight_end":36},{"text":"    CFNumber, CFNumberRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":704,"byte_end":715,"line_start":22,"line_end":22,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":704,"byte_end":715,"line_start":22,"line_end":22,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"CFNumber","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFNumberRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFNumber`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFNumber` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":680,"byte_end":735,"line_start":22,"line_end":22,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberSInt32Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":1024,"byte_end":1043,"line_start":33,"line_end":33,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                kCFNumberSInt32Type,","highlight_start":17,"highlight_end":36}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberSInt32Type` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:33:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberSInt32Type,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberSInt64Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":1424,"byte_end":1443,"line_start":50,"line_end":50,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                kCFNumberSInt64Type,","highlight_start":17,"highlight_end":36}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberSInt64Type` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:50:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberSInt64Type,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberFloat32Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":1826,"byte_end":1846,"line_start":67,"line_end":67,"column_start":17,"column_end":37,"is_primary":true,"text":[{"text":"                kCFNumberFloat32Type,","highlight_start":17,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberFloat32Type` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:67:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberFloat32Type,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberFloat64Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":2229,"byte_end":2249,"line_start":84,"line_end":84,"column_start":17,"column_end":37,"is_primary":true,"text":[{"text":"                kCFNumberFloat64Type,","highlight_start":17,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberFloat64Type` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:84:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberFloat64Type,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberSInt32Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":2637,"byte_end":2656,"line_start":102,"line_end":102,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                kCFNumberSInt32Type,","highlight_start":17,"highlight_end":36}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberSInt32Type` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:102:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberSInt32Type,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberSInt64Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":2996,"byte_end":3015,"line_start":116,"line_end":116,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                kCFNumberSInt64Type,","highlight_start":17,"highlight_end":36}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberSInt64Type` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:116:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberSInt64Type,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberFloat32Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":3355,"byte_end":3375,"line_start":130,"line_end":130,"column_start":17,"column_end":37,"is_primary":true,"text":[{"text":"                kCFNumberFloat32Type,","highlight_start":17,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberFloat32Type` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:130:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberFloat32Type,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFNumberFloat64Type` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":3715,"byte_end":3735,"line_start":144,"line_end":144,"column_start":17,"column_end":37,"is_primary":true,"text":[{"text":"                kCFNumberFloat64Type,","highlight_start":17,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFNumberFloat64Type` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:144:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFNumberFloat64Type,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListMutabilityOptions` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":895,"byte_end":926,"line_start":28,"line_end":28,"column_start":14,"column_end":45,"is_primary":true,"text":[{"text":"    options: CFPropertyListMutabilityOptions,","highlight_start":14,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListMutabilityOptions` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:28:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    options: CFPropertyListMutabilityOptions,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListFormat` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":956,"byte_end":976,"line_start":29,"line_end":29,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":") -> Result<(*const c_void, CFPropertyListFormat), CFError> {","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":956,"byte_end":976,"line_start":29,"line_end":29,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":") -> Result<(*const c_void, CFPropertyListFormat), CFError> {","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"you might be missing a type parameter","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":862,"byte_end":862,"line_start":26,"line_end":26,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"pub fn create_with_data(","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"<CFPropertyListFormat>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListFormat` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:29:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<(*const c_void, CFPropertyListFormat), CFError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a struct with a similar name exists\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m) -> Result<(*const c_void, \u001b[0m\u001b[0m\u001b[38;5;10mCFPropertyList\u001b[0m\u001b[0m), CFError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might be missing a type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn create_with_data\u001b[0m\u001b[0m\u001b[38;5;10m<CFPropertyListFormat>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListFormat` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":1080,"byte_end":1100,"line_start":32,"line_end":32,"column_start":25,"column_end":45,"is_primary":true,"text":[{"text":"        let mut format: CFPropertyListFormat = 0;","highlight_start":25,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":1080,"byte_end":1100,"line_start":32,"line_end":32,"column_start":25,"column_end":45,"is_primary":true,"text":[{"text":"        let mut format: CFPropertyListFormat = 0;","highlight_start":25,"highlight_end":45}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListFormat` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:32:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut format: CFPropertyListFormat = 0;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFPropertyList`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListFormat` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":1553,"byte_end":1573,"line_start":50,"line_end":50,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"    format: CFPropertyListFormat,","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":1553,"byte_end":1573,"line_start":50,"line_end":50,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"    format: CFPropertyListFormat,","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListFormat` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:50:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    format: CFPropertyListFormat,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFPropertyList`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":4292,"byte_end":4309,"line_start":115,"line_end":115,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":4292,"byte_end":4309,"line_start":115,"line_end":115,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:115:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFPropertyList, CFPropertyListRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFPropertyList`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:98:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFPropertyList, CFPropertyListRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":4432,"byte_end":4449,"line_start":122,"line_end":122,"column_start":42,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn as_concrete_TypeRef(&self) -> CFPropertyListRef {","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":4432,"byte_end":4449,"line_start":122,"line_end":122,"column_start":42,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn as_concrete_TypeRef(&self) -> CFPropertyListRef {","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:122:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn as_concrete_TypeRef(&self) -> CFPropertyListRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFPropertyList`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":4537,"byte_end":4554,"line_start":127,"line_end":127,"column_start":50,"column_end":67,"is_primary":true,"text":[{"text":"    pub unsafe fn wrap_under_get_rule(reference: CFPropertyListRef) -> CFPropertyList {","highlight_start":50,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":4537,"byte_end":4554,"line_start":127,"line_end":127,"column_start":50,"column_end":67,"is_primary":true,"text":[{"text":"    pub unsafe fn wrap_under_get_rule(reference: CFPropertyListRef) -> CFPropertyList {","highlight_start":50,"highlight_end":67}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:127:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn wrap_under_get_rule(reference: CFPropertyListRef) -> CFPropertyList {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFPropertyList`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFPropertyListRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFPropertyList` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":3297,"byte_end":4311,"line_start":98,"line_end":116,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A CFPropertyList struct. This is superclass to [`CFData`], [`CFString`], [`CFArray`],","highlight_start":1,"highlight_end":94},{"text":"    /// [`CFDictionary`], [`CFDate`], [`CFBoolean`], and [`CFNumber`].","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This superclass type does not have its own `CFTypeID`, instead each instance has the `CFTypeID`","highlight_start":1,"highlight_end":104},{"text":"    /// of the subclass it is an instance of. Thus, this type cannot implement the [`TCFType`] trait,","highlight_start":1,"highlight_end":102},{"text":"    /// since it cannot implement the static [`TCFType::type_id()`] method.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [`CFData`]: ../data/struct.CFData.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFString`]: ../string/struct.CFString.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`CFArray`]: ../array/struct.CFArray.html","highlight_start":1,"highlight_end":50},{"text":"    /// [`CFDictionary`]: ../dictionary/struct.CFDictionary.html","highlight_start":1,"highlight_end":65},{"text":"    /// [`CFDate`]: ../date/struct.CFDate.html","highlight_start":1,"highlight_end":47},{"text":"    /// [`CFBoolean`]: ../boolean/struct.CFBoolean.html","highlight_start":1,"highlight_end":56},{"text":"    /// [`CFNumber`]: ../number/struct.CFNumber.html","highlight_start":1,"highlight_end":53},{"text":"    /// [`TCFType`]: ../base/trait.TCFType.html","highlight_start":1,"highlight_end":48},{"text":"    /// [`TCFType::type_id()`]: ../base/trait.TCFType.html#method.type_of","highlight_start":1,"highlight_end":74},{"text":"    CFPropertyList, CFPropertyListRef","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":5290,"byte_end":5307,"line_start":154,"line_end":154,"column_start":47,"column_end":64,"is_primary":true,"text":[{"text":"    pub unsafe fn wrap_under_create_rule(obj: CFPropertyListRef) -> CFPropertyList {","highlight_start":47,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":5290,"byte_end":5307,"line_start":154,"line_end":154,"column_start":47,"column_end":64,"is_primary":true,"text":[{"text":"    pub unsafe fn wrap_under_create_rule(obj: CFPropertyListRef) -> CFPropertyList {","highlight_start":47,"highlight_end":64}],"label":null,"suggested_replacement":"CFPropertyList","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFPropertyListRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:154:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn wrap_under_create_rule(obj: CFPropertyListRef) -> CFPropertyList {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFPropertyList`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFPropertyList` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoop` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":850,"byte_end":891,"line_start":24,"line_end":24,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":878,"byte_end":890,"line_start":24,"line_end":24,"column_start":29,"column_end":41,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":29,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":878,"byte_end":890,"line_start":24,"line_end":24,"column_start":29,"column_end":41,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":29,"highlight_end":41}],"label":null,"suggested_replacement":"CFRunLoop","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:24:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoop, CFRunLoopRef);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoop` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":850,"byte_end":891,"line_start":24,"line_end":24,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:24:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoop, CFRunLoopRef);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoop` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":850,"byte_end":891,"line_start":24,"line_end":24,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":918,"byte_end":930,"line_start":25,"line_end":25,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":918,"byte_end":930,"line_start":25,"line_end":25,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":"CFRunLoop","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoop` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":893,"byte_end":951,"line_start":25,"line_end":25,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopTimerRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopTimer` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4406,"byte_end":4423,"line_start":146,"line_end":146,"column_start":34,"column_end":51,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":34,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4406,"byte_end":4423,"line_start":146,"line_end":146,"column_start":34,"column_end":51,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":34,"highlight_end":51}],"label":null,"suggested_replacement":"CFRunLoopTimer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopTimerRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:146:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopTimer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopTimer` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:146:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopTimerRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopTimer` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4456,"byte_end":4473,"line_start":147,"line_end":147,"column_start":31,"column_end":48,"is_primary":true,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":31,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4456,"byte_end":4473,"line_start":147,"line_end":147,"column_start":31,"column_end":48,"is_primary":true,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":31,"highlight_end":48}],"label":null,"suggested_replacement":"CFRunLoopTimer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopTimerRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopTimer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopTimer` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4426,"byte_end":4499,"line_start":147,"line_end":147,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopTimerCallBack` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4679,"byte_end":4701,"line_start":155,"line_end":155,"column_start":18,"column_end":40,"is_primary":true,"text":[{"text":"        callout: CFRunLoopTimerCallBack,","highlight_start":18,"highlight_end":40}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopTimerCallBack` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:155:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        callout: CFRunLoopTimerCallBack,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopTimerContext` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopTimer` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4725,"byte_end":4746,"line_start":156,"line_end":156,"column_start":23,"column_end":44,"is_primary":true,"text":[{"text":"        context: *mut CFRunLoopTimerContext,","highlight_start":23,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4725,"byte_end":4746,"line_start":156,"line_end":156,"column_start":23,"column_end":44,"is_primary":true,"text":[{"text":"        context: *mut CFRunLoopTimerContext,","highlight_start":23,"highlight_end":44}],"label":null,"suggested_replacement":"CFRunLoopTimer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopTimerContext` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:156:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        context: *mut CFRunLoopTimerContext,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopTimer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopTimer` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopSourceRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopSource` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5115,"byte_end":5168,"line_start":173,"line_end":173,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5149,"byte_end":5167,"line_start":173,"line_end":173,"column_start":35,"column_end":53,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":35,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5149,"byte_end":5167,"line_start":173,"line_end":173,"column_start":35,"column_end":53,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":35,"highlight_end":53}],"label":null,"suggested_replacement":"CFRunLoopSource","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopSourceRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:173:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopSource`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopSource` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5115,"byte_end":5168,"line_start":173,"line_end":173,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:173:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopSourceRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopSource` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5115,"byte_end":5168,"line_start":173,"line_end":173,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5210,"byte_end":5228,"line_start":176,"line_end":176,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    CFRunLoopSourceRef,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5210,"byte_end":5228,"line_start":176,"line_end":176,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    CFRunLoopSourceRef,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"CFRunLoopSource","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopSourceRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:176:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopSource`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopSource` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5170,"byte_end":5260,"line_start":174,"line_end":178,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopSource,","highlight_start":1,"highlight_end":21},{"text":"    CFRunLoopSourceRef,","highlight_start":1,"highlight_end":24},{"text":"    CFRunLoopSourceGetTypeID","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSource,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopObserverRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopObserver` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5432,"byte_end":5489,"line_start":186,"line_end":186,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5468,"byte_end":5488,"line_start":186,"line_end":186,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5468,"byte_end":5488,"line_start":186,"line_end":186,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":"CFRunLoopObserver","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopObserverRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:186:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopObserver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopObserver` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5432,"byte_end":5489,"line_start":186,"line_end":186,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:186:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFRunLoopObserverRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFRunLoopObserver` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5432,"byte_end":5489,"line_start":186,"line_end":186,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5533,"byte_end":5553,"line_start":189,"line_end":189,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    CFRunLoopObserverRef,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5533,"byte_end":5553,"line_start":189,"line_end":189,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    CFRunLoopObserverRef,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":"CFRunLoopObserver","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFRunLoopObserverRef` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:189:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFRunLoopObserver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFRunLoopObserver` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5491,"byte_end":5587,"line_start":187,"line_end":191,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_TCFType!(","highlight_start":1,"highlight_end":15},{"text":"    CFRunLoopObserver,","highlight_start":1,"highlight_end":23},{"text":"    CFRunLoopObserverRef,","highlight_start":1,"highlight_end":26},{"text":"    CFRunLoopObserverGetTypeID","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:187:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserver,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFSetRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":752,"byte_end":760,"line_start":21,"line_end":21,"column_start":37,"column_end":45,"is_primary":true,"text":[{"text":"pub struct CFSet<T = *const c_void>(CFSetRef, PhantomData<T>);","highlight_start":37,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFSetRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:21:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFSet<T = *const c_void>(CFSetRef, PhantomData<T>);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFSetRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":916,"byte_end":924,"line_start":29,"line_end":29,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":25,"highlight_end":33}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFSetRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":892,"byte_end":941,"line_start":29,"line_end":29,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFTypeSetCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":1416,"byte_end":1435,"line_start":44,"line_end":44,"column_start":18,"column_end":37,"is_primary":true,"text":[{"text":"                &kCFTypeSetCallBacks,","highlight_start":18,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFTypeSetCallBacks` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:44:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &kCFTypeSetCallBacks,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFStringRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":775,"byte_end":883,"line_start":24,"line_end":27,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable string in one of a variety of encodings.","highlight_start":1,"highlight_end":62},{"text":"    CFString, CFStringRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":870,"byte_end":881,"line_start":26,"line_end":26,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"    CFString, CFStringRef","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":870,"byte_end":881,"line_start":26,"line_end":26,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"    CFString, CFStringRef","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":"CFString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFStringRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:26:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFString, CFStringRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":775,"byte_end":883,"line_start":24,"line_end":27,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable string in one of a variety of encodings.","highlight_start":1,"highlight_end":62},{"text":"    CFString, CFStringRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:24:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An immutable string in one of a variety of encodings.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFString, CFStringRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFStringRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":775,"byte_end":883,"line_start":24,"line_end":27,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// An immutable string in one of a variety of encodings.","highlight_start":1,"highlight_end":62},{"text":"    CFString, CFStringRef","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":908,"byte_end":919,"line_start":28,"line_end":28,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":908,"byte_end":919,"line_start":28,"line_end":28,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"CFString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFStringRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":884,"byte_end":939,"line_start":28,"line_end":28,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFStringEncodingUTF8` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":1574,"byte_end":1595,"line_start":51,"line_end":51,"column_start":60,"column_end":81,"is_primary":true,"text":[{"text":"            let c_string = CFStringGetCStringPtr(cf_str.0, kCFStringEncodingUTF8);","highlight_start":60,"highlight_end":81}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFStringEncodingUTF8` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:51:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let c_string = CFStringGetCStringPtr(cf_str.0, kCFStringEncodingUTF8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFStringEncodingUTF8` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":2166,"byte_end":2187,"line_start":66,"line_end":66,"column_start":21,"column_end":42,"is_primary":true,"text":[{"text":"                    kCFStringEncodingUTF8,","highlight_start":21,"highlight_end":42}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFStringEncodingUTF8` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:66:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    kCFStringEncodingUTF8,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFStringEncodingUTF8` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":2794,"byte_end":2815,"line_start":84,"line_end":84,"column_start":21,"column_end":42,"is_primary":true,"text":[{"text":"                    kCFStringEncodingUTF8,","highlight_start":21,"highlight_end":42}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFStringEncodingUTF8` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:84:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    kCFStringEncodingUTF8,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFStringEncodingUTF8` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":3980,"byte_end":4001,"line_start":123,"line_end":123,"column_start":17,"column_end":38,"is_primary":true,"text":[{"text":"                kCFStringEncodingUTF8,","highlight_start":17,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFStringEncodingUTF8` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:123:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFStringEncodingUTF8,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFStringEncodingUTF8` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":4551,"byte_end":4572,"line_start":139,"line_end":139,"column_start":17,"column_end":38,"is_primary":true,"text":[{"text":"                kCFStringEncodingUTF8,","highlight_start":17,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFStringEncodingUTF8` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:139:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFStringEncodingUTF8,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `kCFStringEncodingUTF8` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":5176,"byte_end":5197,"line_start":161,"line_end":161,"column_start":17,"column_end":38,"is_primary":true,"text":[{"text":"                kCFStringEncodingUTF8,","highlight_start":17,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `kCFStringEncodingUTF8` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:161:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                kCFStringEncodingUTF8,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTimeZoneRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFTimeZone` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":736,"byte_end":807,"line_start":22,"line_end":25,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A time zone.","highlight_start":1,"highlight_end":21},{"text":"    CFTimeZone, CFTimeZoneRef","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":792,"byte_end":805,"line_start":24,"line_end":24,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    CFTimeZone, CFTimeZoneRef","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":792,"byte_end":805,"line_start":24,"line_end":24,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    CFTimeZone, CFTimeZoneRef","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"CFTimeZone","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTimeZoneRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:24:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFTimeZone, CFTimeZoneRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFTimeZone`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFTimeZone` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":736,"byte_end":807,"line_start":22,"line_end":25,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A time zone.","highlight_start":1,"highlight_end":21},{"text":"    CFTimeZone, CFTimeZoneRef","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:22:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A time zone.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFTimeZone, CFTimeZoneRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTimeZoneRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFTimeZone` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":736,"byte_end":807,"line_start":22,"line_end":25,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A time zone.","highlight_start":1,"highlight_end":21},{"text":"    CFTimeZone, CFTimeZoneRef","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":834,"byte_end":847,"line_start":26,"line_end":26,"column_start":27,"column_end":40,"is_primary":true,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":27,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":834,"byte_end":847,"line_start":26,"line_end":26,"column_start":27,"column_end":40,"is_primary":true,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":27,"highlight_end":40}],"label":null,"suggested_replacement":"CFTimeZone","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTimeZoneRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFTimeZone`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFTimeZone` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":808,"byte_end":869,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFURLRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":838,"byte_end":846,"line_start":29,"line_end":29,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"declare_TCFType!(CFURL, CFURLRef);","highlight_start":25,"highlight_end":33}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFURLRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:29:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFURL, CFURLRef);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":814,"byte_end":847,"line_start":29,"line_end":29,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"declare_TCFType!(CFURL, CFURLRef);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType!(CFURL, CFURLRef);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFURLRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":870,"byte_end":878,"line_start":30,"line_end":30,"column_start":22,"column_end":30,"is_primary":true,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":22,"highlight_end":30}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFURLRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":849,"byte_end":895,"line_start":30,"line_end":30,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFURLPathStyle` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":2227,"byte_end":2241,"line_start":75,"line_end":75,"column_start":20,"column_end":34,"is_primary":true,"text":[{"text":"        pathStyle: CFURLPathStyle,","highlight_start":20,"highlight_end":34}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFURLPathStyle` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:75:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pathStyle: CFURLPathStyle,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFURLPathStyle` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":3466,"byte_end":3480,"line_start":113,"line_end":113,"column_start":51,"column_end":65,"is_primary":true,"text":[{"text":"    pub fn get_file_system_path(&self, pathStyle: CFURLPathStyle) -> CFString {","highlight_start":51,"highlight_end":65}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFURLPathStyle` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:113:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_file_system_path(&self, pathStyle: CFURLPathStyle) -> CFString {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFUUIDRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFUUID` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":683,"byte_end":741,"line_start":23,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A UUID.","highlight_start":1,"highlight_end":16},{"text":"    CFUUID, CFUUIDRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":730,"byte_end":739,"line_start":25,"line_end":25,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFUUID, CFUUIDRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":730,"byte_end":739,"line_start":25,"line_end":25,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    CFUUID, CFUUIDRef","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"CFUUID","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFUUIDRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:25:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFUUID, CFUUIDRef\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFUUID`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFUUID` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2224,"byte_end":2233,"line_start":67,"line_end":67,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }","highlight_start":40,"highlight_end":49}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":683,"byte_end":741,"line_start":23,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A UUID.","highlight_start":1,"highlight_end":16},{"text":"    CFUUID, CFUUIDRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRelease` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:67:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                unsafe { $crate::base::CFRelease(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdeclare_TCFType! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A UUID.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFUUID, CFUUIDRef\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFUUIDRef` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFUUID` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":683,"byte_end":741,"line_start":23,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// A UUID.","highlight_start":1,"highlight_end":16},{"text":"    CFUUID, CFUUIDRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":764,"byte_end":773,"line_start":27,"line_end":27,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":764,"byte_end":773,"line_start":27,"line_end":27,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":23,"highlight_end":32}],"label":null,"suggested_replacement":"CFUUID","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFUUIDRef` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFUUID`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFUUID` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3295,"byte_end":3303,"line_start":99,"line_end":99,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;","highlight_start":47,"highlight_end":55}],"label":"not found in `$crate::base`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in module `$crate::base`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:99:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let reference = $crate::base::CFRetain(reference as *const ::std::os::raw::c_void) as $ty_ref;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3522,"byte_end":3531,"line_start":104,"line_end":104,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:104:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn as_CFTypeRef(&self) -> $crate::base::CFTypeRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeRef` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":3594,"byte_end":3603,"line_start":105,"line_end":105,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"                self.as_concrete_TypeRef() as $crate::base::CFTypeRef","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeRef` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.as_concrete_TypeRef() as $crate::base::CFTypeRef\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `CFTypeID` in module `$crate::base`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named struct `CFType` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":1142,"byte_end":1235,"line_start":40,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    /// Superclass of all Core Foundation objects.","highlight_start":1,"highlight_end":51},{"text":"    CFType, CFTypeRef","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":4087,"byte_end":4095,"line_start":117,"line_end":117,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"            fn type_id() -> $crate::base::CFTypeID {","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"CFType","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2661,"byte_end":2698,"line_start":83,"line_end":83,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        impl_TCFType!($ty<>, $ty_ref, $ty_id);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":742,"byte_end":791,"line_start":27,"line_end":27,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2575,"byte_end":2600,"line_start":81,"line_end":81,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! impl_TCFType {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `CFTypeID` in module `$crate::base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:117:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named struct `CFType` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn type_id() -> $crate::base::CFTypeID {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `CFType`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_TCFType` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `CFIndex`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":993,"byte_end":1000,"line_start":32,"line_end":32,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"        let max_CFIndex = CFIndex::max_value();","highlight_start":27,"highlight_end":34}],"label":"use of undeclared type `CFIndex`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `CFIndex`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:32:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let max_CFIndex = CFIndex::max_value();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `CFIndex`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":1711,"byte_end":1727,"line_start":59,"line_end":59,"column_start":39,"column_end":55,"is_primary":true,"text":[{"text":"impl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);","highlight_start":39,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:59:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFArray<T>, CFArrayRef, CFArrayGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":2063,"byte_end":2076,"line_start":71,"line_end":71,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"            let array_ref = CFArrayCreate(","highlight_start":29,"highlight_end":42}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:71:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let array_ref = CFArrayCreate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":2646,"byte_end":2659,"line_start":88,"line_end":88,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"            let array_ref = CFArrayCreate(","highlight_start":29,"highlight_end":42}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:88:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let array_ref = CFArrayCreate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayGetCount` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":3902,"byte_end":3917,"line_start":128,"line_end":128,"column_start":18,"column_end":33,"is_primary":true,"text":[{"text":"        unsafe { CFArrayGetCount(self.0) }","highlight_start":18,"highlight_end":33}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayGetCount` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:128:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFArrayGetCount(self.0) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayGetValueAtIndex` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":4220,"byte_end":4242,"line_start":142,"line_end":142,"column_start":22,"column_end":44,"is_primary":true,"text":[{"text":"        T::from_void(CFArrayGetValueAtIndex(self.0, index))","highlight_start":22,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayGetValueAtIndex` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:142:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T::from_void(CFArrayGetValueAtIndex(self.0, index))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayGetValueAtIndex` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":4452,"byte_end":4474,"line_start":151,"line_end":151,"column_start":40,"column_end":62,"is_primary":true,"text":[{"text":"            Some(unsafe { T::from_void(CFArrayGetValueAtIndex(self.0, index)) })","highlight_start":40,"highlight_end":62}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayGetValueAtIndex` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:151:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(unsafe { T::from_void(CFArrayGetValueAtIndex(self.0, index)) })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFArrayGetValues` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs","byte_start":4708,"byte_end":4724,"line_start":160,"line_end":160,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"            CFArrayGetValues(self.0, range, vec.as_mut_ptr());","highlight_start":13,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFArrayGetValues` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/array.rs:160:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFArrayGetValues(self.0, range, vec.as_mut_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":779,"byte_end":806,"line_start":23,"line_end":23,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    CFAttributedStringGetTypeID","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":779,"byte_end":806,"line_start":23,"line_end":23,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    CFAttributedStringGetTypeID","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:23:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":955,"byte_end":979,"line_start":31,"line_end":31,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                CFAttributedStringCreate(kCFAllocatorDefault, string.as_concrete_TypeRef(), null());","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":955,"byte_end":979,"line_start":31,"line_end":31,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                CFAttributedStringCreate(kCFAllocatorDefault, string.as_concrete_TypeRef(), null());","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:31:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CFAttributedStringCreate(kCFAllocatorDefault, string.as_concrete_TypeRef(), null());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringGetLength` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1194,"byte_end":1221,"line_start":39,"line_end":39,"column_start":18,"column_end":45,"is_primary":true,"text":[{"text":"        unsafe { CFAttributedStringGetLength(self.0) }","highlight_start":18,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1194,"byte_end":1221,"line_start":39,"line_end":39,"column_start":18,"column_end":45,"is_primary":true,"text":[{"text":"        unsafe { CFAttributedStringGetLength(self.0) }","highlight_start":18,"highlight_end":45}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringGetLength` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:39:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFAttributedStringGetLength(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1406,"byte_end":1433,"line_start":49,"line_end":49,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    CFAttributedStringGetTypeID","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1406,"byte_end":1433,"line_start":49,"line_end":49,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    CFAttributedStringGetTypeID","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:49:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFAttributedStringGetTypeID\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringCreateMutable` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1556,"byte_end":1587,"line_start":56,"line_end":56,"column_start":28,"column_end":59,"is_primary":true,"text":[{"text":"            let astr_ref = CFAttributedStringCreateMutable(kCFAllocatorDefault, 0);","highlight_start":28,"highlight_end":59}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringCreateMutable` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:56:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let astr_ref = CFAttributedStringCreateMutable(kCFAllocatorDefault, 0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringGetLength` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFAttributedString` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":642,"byte_end":708,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFAttributedString, CFAttributedStringRef","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1774,"byte_end":1801,"line_start":64,"line_end":64,"column_start":18,"column_end":45,"is_primary":true,"text":[{"text":"        unsafe { CFAttributedStringGetLength(self.0) }","highlight_start":18,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1774,"byte_end":1801,"line_start":64,"line_end":64,"column_start":18,"column_end":45,"is_primary":true,"text":[{"text":"        unsafe { CFAttributedStringGetLength(self.0) }","highlight_start":18,"highlight_end":45}],"label":null,"suggested_replacement":"CFAttributedString","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringGetLength` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:64:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFAttributedStringGetLength(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFAttributedString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFAttributedString` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringReplaceString` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":1933,"byte_end":1964,"line_start":70,"line_end":70,"column_start":13,"column_end":44,"is_primary":true,"text":[{"text":"            CFAttributedStringReplaceString(self.0, range, string.as_concrete_TypeRef());","highlight_start":13,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringReplaceString` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:70:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFAttributedStringReplaceString(self.0, range, string.as_concrete_TypeRef());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAttributedStringSetAttribute` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs","byte_start":2167,"byte_end":2197,"line_start":77,"line_end":77,"column_start":13,"column_end":43,"is_primary":true,"text":[{"text":"            CFAttributedStringSetAttribute(self.0, range, name, value.as_CFTypeRef());","highlight_start":13,"highlight_end":43}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAttributedStringSetAttribute` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/attributed_string.rs:77:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFAttributedStringSetAttribute(self.0, range, name, value.as_CFTypeRef());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFCopyDescription` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4153,"byte_end":4170,"line_start":118,"line_end":118,"column_start":62,"column_end":79,"is_primary":true,"text":[{"text":"        let desc = unsafe { CFString::wrap_under_create_rule(CFCopyDescription(self.0)) };","highlight_start":62,"highlight_end":79}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFCopyDescription` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:118:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let desc = unsafe { CFString::wrap_under_create_rule(CFCopyDescription(self.0)) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFEqual` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4449,"byte_end":4456,"line_start":133,"line_end":133,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"        unsafe { CFEqual(self.as_CFTypeRef(), other.as_CFTypeRef()) != 0 }","highlight_start":18,"highlight_end":25}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFEqual` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:133:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFEqual(self.as_CFTypeRef(), other.as_CFTypeRef()) != 0 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAllocatorGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4606,"byte_end":4626,"line_start":138,"line_end":138,"column_start":44,"column_end":64,"is_primary":true,"text":[{"text":"impl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);","highlight_start":44,"highlight_end":64}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAllocatorGetTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:138:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFAllocator, CFAllocatorRef, CFAllocatorGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAllocatorCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":4777,"byte_end":4794,"line_start":144,"line_end":144,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"            let allocator_ref = CFAllocatorCreate(kCFAllocatorDefault, &mut context);","highlight_start":33,"highlight_end":50}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAllocatorCreate` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:144:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let allocator_ref = CFAllocatorCreate(kCFAllocatorDefault, &mut context);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFGetRetainCount` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":6965,"byte_end":6981,"line_start":200,"line_end":200,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"        unsafe { CFGetRetainCount(self.as_CFTypeRef()) }","highlight_start":18,"highlight_end":34}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFGetRetainCount` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:200:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFGetRetainCount(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7123,"byte_end":7134,"line_start":206,"line_end":206,"column_start":18,"column_end":29,"is_primary":true,"text":[{"text":"        unsafe { CFGetTypeID(self.as_CFTypeRef()) }","highlight_start":18,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFGetTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:206:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFGetTypeID(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFShow` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7272,"byte_end":7278,"line_start":211,"line_end":211,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"        unsafe { CFShow(self.as_CFTypeRef()) }","highlight_start":18,"highlight_end":24}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFShow` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:211:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFShow(self.as_CFTypeRef()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRetain` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs","byte_start":7840,"byte_end":7848,"line_start":232,"line_end":232,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"        let reference: CFTypeRef = CFRetain(reference);","highlight_start":36,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRetain` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/base.rs:232:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let reference: CFTypeRef = CFRetain(reference);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":888,"byte_end":905,"line_start":27,"line_end":27,"column_start":38,"column_end":55,"is_primary":true,"text":[{"text":"impl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);","highlight_start":38,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:27:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFBundle, CFBundleRef, CFBundleGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":1026,"byte_end":1040,"line_start":32,"line_end":32,"column_start":30,"column_end":44,"is_primary":true,"text":[{"text":"            let bundle_ref = CFBundleCreate(kCFAllocatorDefault, bundleURL.as_concrete_TypeRef());","highlight_start":30,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:32:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bundle_ref = CFBundleCreate(kCFAllocatorDefault, bundleURL.as_concrete_TypeRef());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleGetBundleWithIdentifier` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":1397,"byte_end":1428,"line_start":43,"line_end":43,"column_start":30,"column_end":61,"is_primary":true,"text":[{"text":"            let bundle_ref = CFBundleGetBundleWithIdentifier(identifier.as_concrete_TypeRef());","highlight_start":30,"highlight_end":61}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleGetBundleWithIdentifier` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:43:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bundle_ref = CFBundleGetBundleWithIdentifier(identifier.as_concrete_TypeRef());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleGetFunctionPointerForName` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":1755,"byte_end":1788,"line_start":54,"line_end":54,"column_start":13,"column_end":46,"is_primary":true,"text":[{"text":"            CFBundleGetFunctionPointerForName(","highlight_start":13,"highlight_end":46}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleGetFunctionPointerForName` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:54:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFBundleGetFunctionPointerForName(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleGetMainBundle` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":2003,"byte_end":2024,"line_start":63,"line_end":63,"column_start":30,"column_end":51,"is_primary":true,"text":[{"text":"            let bundle_ref = CFBundleGetMainBundle();","highlight_start":30,"highlight_end":51}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleGetMainBundle` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:63:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bundle_ref = CFBundleGetMainBundle();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleGetInfoDictionary` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":2219,"byte_end":2244,"line_start":70,"line_end":70,"column_start":35,"column_end":60,"is_primary":true,"text":[{"text":"            let info_dictionary = CFBundleGetInfoDictionary(self.0);","highlight_start":35,"highlight_end":60}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleGetInfoDictionary` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:70:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let info_dictionary = CFBundleGetInfoDictionary(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleCopyExecutableURL` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":2424,"byte_end":2449,"line_start":77,"line_end":77,"column_start":27,"column_end":52,"is_primary":true,"text":[{"text":"            let exe_url = CFBundleCopyExecutableURL(self.0);","highlight_start":27,"highlight_end":52}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleCopyExecutableURL` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:77:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let exe_url = CFBundleCopyExecutableURL(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleCopyBundleURL` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":2754,"byte_end":2775,"line_start":89,"line_end":89,"column_start":30,"column_end":51,"is_primary":true,"text":[{"text":"            let bundle_url = CFBundleCopyBundleURL(self.0);","highlight_start":30,"highlight_end":51}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleCopyBundleURL` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:89:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bundle_url = CFBundleCopyBundleURL(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleCopyResourcesDirectoryURL` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":3332,"byte_end":3365,"line_start":109,"line_end":109,"column_start":30,"column_end":63,"is_primary":true,"text":[{"text":"            let bundle_url = CFBundleCopyResourcesDirectoryURL(self.0);","highlight_start":30,"highlight_end":63}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleCopyResourcesDirectoryURL` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:109:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bundle_url = CFBundleCopyResourcesDirectoryURL(self.0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleCopyPrivateFrameworksURL` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":3910,"byte_end":3942,"line_start":128,"line_end":128,"column_start":26,"column_end":58,"is_primary":true,"text":[{"text":"            let fw_url = CFBundleCopyPrivateFrameworksURL(self.0);","highlight_start":26,"highlight_end":58}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleCopyPrivateFrameworksURL` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:128:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let fw_url = CFBundleCopyPrivateFrameworksURL(self.0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFBundleCopySharedSupportURL` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs","byte_start":4219,"byte_end":4247,"line_start":139,"line_end":139,"column_start":26,"column_end":54,"is_primary":true,"text":[{"text":"            let fw_url = CFBundleCopySharedSupportURL(self.0);","highlight_start":26,"highlight_end":54}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFBundleCopySharedSupportURL` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/bundle.rs:139:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let fw_url = CFBundleCopySharedSupportURL(self.0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFCharacterSetGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs","byte_start":700,"byte_end":723,"line_start":20,"line_end":20,"column_start":50,"column_end":73,"is_primary":true,"text":[{"text":"impl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);","highlight_start":50,"highlight_end":73}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFCharacterSetGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/characterset.rs:20:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFCharacterSet, CFCharacterSetRef, CFCharacterSetGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDataGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":798,"byte_end":813,"line_start":25,"line_end":25,"column_start":34,"column_end":49,"is_primary":true,"text":[{"text":"impl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);","highlight_start":34,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDataGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:25:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFData, CFDataRef, CFDataGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDataCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":1010,"byte_end":1022,"line_start":32,"line_end":32,"column_start":28,"column_end":40,"is_primary":true,"text":[{"text":"            let data_ref = CFDataCreate(","highlight_start":28,"highlight_end":40}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDataCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:32:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let data_ref = CFDataCreate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDataCreateWithBytesNoCopy` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":2407,"byte_end":2434,"line_start":70,"line_end":70,"column_start":28,"column_end":55,"is_primary":true,"text":[{"text":"            let data_ref = CFDataCreateWithBytesNoCopy(","highlight_start":28,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDataCreateWithBytesNoCopy` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:70:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let data_ref = CFDataCreateWithBytesNoCopy(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDataGetBytePtr` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":2844,"byte_end":2860,"line_start":84,"line_end":84,"column_start":40,"column_end":56,"is_primary":true,"text":[{"text":"        unsafe { slice::from_raw_parts(CFDataGetBytePtr(self.0), self.len() as usize) }","highlight_start":40,"highlight_end":56}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDataGetBytePtr` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:84:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { slice::from_raw_parts(CFDataGetBytePtr(self.0), self.len() as usize) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDataGetLength` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs","byte_start":3014,"byte_end":3029,"line_start":90,"line_end":90,"column_start":18,"column_end":33,"is_primary":true,"text":[{"text":"        unsafe { CFDataGetLength(self.0) }","highlight_start":18,"highlight_end":33}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDataGetLength` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/data.rs:90:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDataGetLength(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDateGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":732,"byte_end":747,"line_start":24,"line_end":24,"column_start":34,"column_end":49,"is_primary":true,"text":[{"text":"impl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);","highlight_start":34,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDateGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:24:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDate, CFDateRef, CFDateGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDateCompare` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":810,"byte_end":823,"line_start":26,"line_end":26,"column_start":28,"column_end":41,"is_primary":true,"text":[{"text":"impl_CFComparison!(CFDate, CFDateCompare);","highlight_start":28,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDateCompare` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:26:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_CFComparison!(CFDate, CFDateCompare);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDateCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":948,"byte_end":960,"line_start":32,"line_end":32,"column_start":28,"column_end":40,"is_primary":true,"text":[{"text":"            let date_ref = CFDateCreate(kCFAllocatorDefault, time);","highlight_start":28,"highlight_end":40}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDateCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:32:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let date_ref = CFDateCreate(kCFAllocatorDefault, time);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFAbsoluteTimeGetCurrent` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":1132,"byte_end":1156,"line_start":39,"line_end":39,"column_start":30,"column_end":54,"is_primary":true,"text":[{"text":"        CFDate::new(unsafe { CFAbsoluteTimeGetCurrent() })","highlight_start":30,"highlight_end":54}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFAbsoluteTimeGetCurrent` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:39:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        CFDate::new(unsafe { CFAbsoluteTimeGetCurrent() })\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDateGetAbsoluteTime` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs","byte_start":1247,"byte_end":1268,"line_start":44,"line_end":44,"column_start":18,"column_end":39,"is_primary":true,"text":[{"text":"        unsafe { CFDateGetAbsoluteTime(self.0) }","highlight_start":18,"highlight_end":39}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDateGetAbsoluteTime` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/date.rs:44:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDateGetAbsoluteTime(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1146,"byte_end":1167,"line_start":37,"line_end":37,"column_start":52,"column_end":73,"is_primary":true,"text":[{"text":"impl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);","highlight_start":52,"highlight_end":73}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:37:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFDictionary<K, V>, CFDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":842,"byte_end":968,"line_start":25,"line_end":29,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub struct CFDictionary<K = *const c_void, V = *const c_void>(","highlight_start":1,"highlight_end":63},{"text":"    CFDictionaryRef,","highlight_start":1,"highlight_end":21},{"text":"    PhantomData<K>,","highlight_start":1,"highlight_end":20},{"text":"    PhantomData<V>,","highlight_start":1,"highlight_end":20},{"text":");","highlight_start":1,"highlight_end":3}],"label":"similarly named tuple struct `CFDictionary` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1689,"byte_end":1707,"line_start":54,"line_end":54,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"            let dictionary_ref = CFDictionaryCreate(","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":1689,"byte_end":1707,"line_start":54,"line_end":54,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"            let dictionary_ref = CFDictionaryCreate(","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":"CFDictionary","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:54:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CFDictionary<K = *const c_void, V = *const c_void>(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFDictionaryRef,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<K>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PhantomData<V>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFDictionary` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            let dictionary_ref = CFDictionaryCreate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFDictionary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetCount` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":2953,"byte_end":2973,"line_start":89,"line_end":89,"column_start":18,"column_end":38,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryGetCount(self.0) as usize }","highlight_start":18,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetCount` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:89:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryGetCount(self.0) as usize }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryContainsKey` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":3199,"byte_end":3222,"line_start":102,"line_end":102,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryContainsKey(self.0, key.to_void()) != 0 }","highlight_start":18,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryContainsKey` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:102:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryContainsKey(self.0, key.to_void()) != 0 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetValueIfPresent` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":3492,"byte_end":3521,"line_start":113,"line_end":113,"column_start":16,"column_end":45,"is_primary":true,"text":[{"text":"            if CFDictionaryGetValueIfPresent(self.0, key.to_void(), &mut value) != 0 {","highlight_start":16,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetValueIfPresent` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:113:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if CFDictionaryGetValueIfPresent(self.0, key.to_void(), &mut value) != 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetKeysAndValues` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4348,"byte_end":4376,"line_start":142,"line_end":142,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            CFDictionaryGetKeysAndValues(self.0, keys.as_mut_ptr(), values.as_mut_ptr());","highlight_start":13,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetKeysAndValues` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:142:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFDictionaryGetKeysAndValues(self.0, keys.as_mut_ptr(), values.as_mut_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":4927,"byte_end":4948,"line_start":164,"line_end":164,"column_start":66,"column_end":87,"is_primary":true,"text":[{"text":"impl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);","highlight_start":66,"highlight_end":87}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:164:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMutableDictionary<K, V>, CFMutableDictionaryRef, CFDictionaryGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryCreateMutable` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":5204,"byte_end":5229,"line_start":174,"line_end":174,"column_start":34,"column_end":59,"is_primary":true,"text":[{"text":"            let dictionary_ref = CFDictionaryCreateMutable(","highlight_start":34,"highlight_end":59}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryCreateMutable` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:174:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let dictionary_ref = CFDictionaryCreateMutable(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryCreateMutableCopy` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":5619,"byte_end":5648,"line_start":187,"line_end":187,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                CFDictionaryCreateMutableCopy(kCFAllocatorDefault, capacity as _, self.0);","highlight_start":17,"highlight_end":46}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryCreateMutableCopy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:187:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CFDictionaryCreateMutableCopy(kCFAllocatorDefault, capacity as _, self.0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetCount` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":6921,"byte_end":6941,"line_start":228,"line_end":228,"column_start":18,"column_end":38,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryGetCount(self.0) as usize }","highlight_start":18,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetCount` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:228:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryGetCount(self.0) as usize }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryContainsKey` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":7142,"byte_end":7165,"line_start":238,"line_end":238,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryContainsKey(self.0, key) != 0 }","highlight_start":18,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryContainsKey` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:238:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryContainsKey(self.0, key) != 0 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetValueIfPresent` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":7419,"byte_end":7448,"line_start":249,"line_end":249,"column_start":16,"column_end":45,"is_primary":true,"text":[{"text":"            if CFDictionaryGetValueIfPresent(self.0, key.to_void(), &mut value) != 0 {","highlight_start":16,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetValueIfPresent` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:249:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if CFDictionaryGetValueIfPresent(self.0, key.to_void(), &mut value) != 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryGetKeysAndValues` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":8269,"byte_end":8297,"line_start":278,"line_end":278,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            CFDictionaryGetKeysAndValues(self.0, keys.as_mut_ptr(), values.as_mut_ptr());","highlight_start":13,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryGetKeysAndValues` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:278:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFDictionaryGetKeysAndValues(self.0, keys.as_mut_ptr(), values.as_mut_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryAddValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":8701,"byte_end":8721,"line_start":295,"line_end":295,"column_start":18,"column_end":38,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryAddValue(self.0, key.to_void(), value.to_void()) }","highlight_start":18,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryAddValue` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:295:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryAddValue(self.0, key.to_void(), value.to_void()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionarySetValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":8959,"byte_end":8979,"line_start":305,"line_end":305,"column_start":18,"column_end":38,"is_primary":true,"text":[{"text":"        unsafe { CFDictionarySetValue(self.0, key.to_void(), value.to_void()) }","highlight_start":18,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionarySetValue` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:305:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionarySetValue(self.0, key.to_void(), value.to_void()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryReplaceValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":9225,"byte_end":9249,"line_start":315,"line_end":315,"column_start":18,"column_end":42,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryReplaceValue(self.0, key.to_void(), value.to_void()) }","highlight_start":18,"highlight_end":42}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryReplaceValue` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:315:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryReplaceValue(self.0, key.to_void(), value.to_void()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryRemoveValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":9463,"byte_end":9486,"line_start":324,"line_end":324,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryRemoveValue(self.0, key.to_void()) }","highlight_start":18,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryRemoveValue` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:324:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryRemoveValue(self.0, key.to_void()) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryRemoveAllValues` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":9585,"byte_end":9612,"line_start":329,"line_end":329,"column_start":18,"column_end":45,"is_primary":true,"text":[{"text":"        unsafe { CFDictionaryRemoveAllValues(self.0) }","highlight_start":18,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryRemoveAllValues` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:329:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFDictionaryRemoveAllValues(self.0) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFDictionaryCreateMutableCopy` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs","byte_start":10073,"byte_end":10102,"line_start":344,"line_end":344,"column_start":32,"column_end":61,"is_primary":true,"text":[{"text":"            let mut_dict_ref = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, dict.0);","highlight_start":32,"highlight_end":61}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFDictionaryCreateMutableCopy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/dictionary.rs:344:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut_dict_ref = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, dict.0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFErrorGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":705,"byte_end":721,"line_start":24,"line_end":24,"column_start":36,"column_end":52,"is_primary":true,"text":[{"text":"impl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);","highlight_start":36,"highlight_end":52}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFErrorGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:24:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFError, CFErrorRef, CFErrorGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFErrorGetDomain` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":1460,"byte_end":1476,"line_start":53,"line_end":53,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"            let s = CFErrorGetDomain(self.0);","highlight_start":21,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFErrorGetDomain` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:53:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let s = CFErrorGetDomain(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFErrorGetCode` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":1658,"byte_end":1672,"line_start":60,"line_end":60,"column_start":18,"column_end":32,"is_primary":true,"text":[{"text":"        unsafe { CFErrorGetCode(self.0) }","highlight_start":18,"highlight_end":32}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFErrorGetCode` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:60:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFErrorGetCode(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFErrorCopyDescription` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs","byte_start":1833,"byte_end":1855,"line_start":66,"line_end":66,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"            let s = CFErrorCopyDescription(self.0);","highlight_start":21,"highlight_end":43}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFErrorCopyDescription` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/error.rs:66:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let s = CFErrorCopyDescription(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":873,"byte_end":898,"line_start":28,"line_end":28,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"    CFFileDescriptorGetTypeID","highlight_start":5,"highlight_end":30}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFFileDescriptorGetTypeID\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1237,"byte_end":1259,"line_start":40,"line_end":40,"column_start":26,"column_end":48,"is_primary":true,"text":[{"text":"            let fd_ref = CFFileDescriptorCreate(","highlight_start":26,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1237,"byte_end":1259,"line_start":40,"line_end":40,"column_start":26,"column_end":48,"is_primary":true,"text":[{"text":"            let fd_ref = CFFileDescriptorCreate(","highlight_start":26,"highlight_end":48}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:40:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let fd_ref = CFFileDescriptorCreate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFFileDescriptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFFileDescriptor` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorGetContext` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1762,"byte_end":1788,"line_start":58,"line_end":58,"column_start":13,"column_end":39,"is_primary":true,"text":[{"text":"            CFFileDescriptorGetContext(self.0, context.as_mut_ptr());","highlight_start":13,"highlight_end":39}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorGetContext` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:58:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFFileDescriptorGetContext(self.0, context.as_mut_ptr());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorEnableCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":1956,"byte_end":1987,"line_start":64,"line_end":64,"column_start":18,"column_end":49,"is_primary":true,"text":[{"text":"        unsafe { CFFileDescriptorEnableCallBacks(self.0, callback_types) }","highlight_start":18,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorEnableCallBacks` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:64:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFFileDescriptorEnableCallBacks(self.0, callback_types) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorDisableCallBacks` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":2107,"byte_end":2139,"line_start":68,"line_end":68,"column_start":18,"column_end":50,"is_primary":true,"text":[{"text":"        unsafe { CFFileDescriptorDisableCallBacks(self.0, callback_types) }","highlight_start":18,"highlight_end":50}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorDisableCallBacks` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:68:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFFileDescriptorDisableCallBacks(self.0, callback_types) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorIsValid` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFFileDescriptor` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":744,"byte_end":806,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"declare_TCFType! {","highlight_start":1,"highlight_end":19},{"text":"    CFFileDescriptor, CFFileDescriptorRef","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":2224,"byte_end":2247,"line_start":72,"line_end":72,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"        unsafe { CFFileDescriptorIsValid(self.0) != 0 }","highlight_start":18,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":2224,"byte_end":2247,"line_start":72,"line_end":72,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"        unsafe { CFFileDescriptorIsValid(self.0) != 0 }","highlight_start":18,"highlight_end":41}],"label":null,"suggested_replacement":"CFFileDescriptor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorIsValid` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:72:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFFileDescriptorIsValid(self.0) != 0 }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFFileDescriptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFFileDescriptor` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorInvalidate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":2318,"byte_end":2344,"line_start":76,"line_end":76,"column_start":18,"column_end":44,"is_primary":true,"text":[{"text":"        unsafe { CFFileDescriptorInvalidate(self.0) }","highlight_start":18,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorInvalidate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:76:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFFileDescriptorInvalidate(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorCreateRunLoopSource` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":2506,"byte_end":2541,"line_start":82,"line_end":82,"column_start":17,"column_end":52,"is_primary":true,"text":[{"text":"                CFFileDescriptorCreateRunLoopSource(kCFAllocatorDefault, self.0, order);","highlight_start":17,"highlight_end":52}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorCreateRunLoopSource` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:82:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CFFileDescriptorCreateRunLoopSource(kCFAllocatorDefault, self.0, order);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFFileDescriptorGetNativeDescriptor` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs","byte_start":2846,"byte_end":2881,"line_start":94,"line_end":94,"column_start":18,"column_end":53,"is_primary":true,"text":[{"text":"        unsafe { CFFileDescriptorGetNativeDescriptor(self.0) }","highlight_start":18,"highlight_end":53}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFFileDescriptorGetNativeDescriptor` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/filedescriptor.rs:94:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFFileDescriptorGetNativeDescriptor(self.0) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFMachPortGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":287,"byte_end":306,"line_start":10,"line_end":10,"column_start":42,"column_end":61,"is_primary":true,"text":[{"text":"impl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);","highlight_start":42,"highlight_end":61}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFMachPortGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:10:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFMachPort, CFMachPortRef, CFMachPortGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFMachPortCreateRunLoopSource` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs","byte_start":524,"byte_end":553,"line_start":17,"line_end":17,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                CFMachPortCreateRunLoopSource(kCFAllocatorDefault, self.0, order);","highlight_start":17,"highlight_end":46}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFMachPortCreateRunLoopSource` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/mach_port.rs:17:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CFMachPortCreateRunLoopSource(kCFAllocatorDefault, self.0, order);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":717,"byte_end":734,"line_start":22,"line_end":22,"column_start":38,"column_end":55,"is_primary":true,"text":[{"text":"impl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);","highlight_start":38,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:22:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFNumber, CFNumberRef, CFNumberGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberCompare` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":801,"byte_end":816,"line_start":24,"line_end":24,"column_start":30,"column_end":45,"is_primary":true,"text":[{"text":"impl_CFComparison!(CFNumber, CFNumberCompare);","highlight_start":30,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberCompare` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:24:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_CFComparison!(CFNumber, CFNumberCompare);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":966,"byte_end":982,"line_start":31,"line_end":31,"column_start":22,"column_end":38,"is_primary":true,"text":[{"text":"            let ok = CFNumberGetValue(","highlight_start":22,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:31:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ok = CFNumberGetValue(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":1366,"byte_end":1382,"line_start":48,"line_end":48,"column_start":22,"column_end":38,"is_primary":true,"text":[{"text":"            let ok = CFNumberGetValue(","highlight_start":22,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:48:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ok = CFNumberGetValue(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":1768,"byte_end":1784,"line_start":65,"line_end":65,"column_start":22,"column_end":38,"is_primary":true,"text":[{"text":"            let ok = CFNumberGetValue(","highlight_start":22,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:65:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ok = CFNumberGetValue(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":2171,"byte_end":2187,"line_start":82,"line_end":82,"column_start":22,"column_end":38,"is_primary":true,"text":[{"text":"            let ok = CFNumberGetValue(","highlight_start":22,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberGetValue` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:82:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ok = CFNumberGetValue(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":2568,"byte_end":2582,"line_start":100,"line_end":100,"column_start":30,"column_end":44,"is_primary":true,"text":[{"text":"            let number_ref = CFNumberCreate(","highlight_start":30,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:100:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let number_ref = CFNumberCreate(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":2927,"byte_end":2941,"line_start":114,"line_end":114,"column_start":30,"column_end":44,"is_primary":true,"text":[{"text":"            let number_ref = CFNumberCreate(","highlight_start":30,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:114:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let number_ref = CFNumberCreate(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":3286,"byte_end":3300,"line_start":128,"line_end":128,"column_start":30,"column_end":44,"is_primary":true,"text":[{"text":"            let number_ref = CFNumberCreate(","highlight_start":30,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:128:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let number_ref = CFNumberCreate(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs","byte_start":3646,"byte_end":3660,"line_start":142,"line_end":142,"column_start":30,"column_end":44,"is_primary":true,"text":[{"text":"            let number_ref = CFNumberCreate(","highlight_start":30,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFNumberCreate` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/number.rs:142:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let number_ref = CFNumberCreate(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFPropertyListCreateWithData` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":1134,"byte_end":1162,"line_start":33,"line_end":33,"column_start":29,"column_end":57,"is_primary":true,"text":[{"text":"        let property_list = CFPropertyListCreateWithData(","highlight_start":29,"highlight_end":57}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFPropertyListCreateWithData` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:33:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let property_list = CFPropertyListCreateWithData(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFPropertyListCreateData` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs","byte_start":1707,"byte_end":1731,"line_start":55,"line_end":55,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"            CFPropertyListCreateData(kCFAllocatorDefault, property_list, format, 0, &mut error);","highlight_start":13,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFPropertyListCreateData` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/propertylist.rs:55:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFPropertyListCreateData(kCFAllocatorDefault, property_list, format, 0, &mut error);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":932,"byte_end":950,"line_start":25,"line_end":25,"column_start":40,"column_end":58,"is_primary":true,"text":[{"text":"impl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);","highlight_start":40,"highlight_end":58}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:25:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoop, CFRunLoopRef, CFRunLoopGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopGetCurrent` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":1372,"byte_end":1391,"line_start":43,"line_end":43,"column_start":32,"column_end":51,"is_primary":true,"text":[{"text":"            let run_loop_ref = CFRunLoopGetCurrent();","highlight_start":32,"highlight_end":51}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopGetCurrent` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:43:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let run_loop_ref = CFRunLoopGetCurrent();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopGetMain` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":1552,"byte_end":1568,"line_start":50,"line_end":50,"column_start":32,"column_end":48,"is_primary":true,"text":[{"text":"            let run_loop_ref = CFRunLoopGetMain();","highlight_start":32,"highlight_end":48}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopGetMain` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:50:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let run_loop_ref = CFRunLoopGetMain();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopRun` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoop` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":850,"byte_end":891,"line_start":24,"line_end":24,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":1700,"byte_end":1712,"line_start":57,"line_end":57,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            CFRunLoopRun();","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":1700,"byte_end":1712,"line_start":57,"line_end":57,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            CFRunLoopRun();","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"CFRunLoop","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopRun` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:57:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopRun();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoop` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopRunInMode` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":2069,"byte_end":2087,"line_start":70,"line_end":70,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            match CFRunLoopRunInMode(mode, seconds, return_after_source_handled) {","highlight_start":19,"highlight_end":37}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopRunInMode` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:70:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match CFRunLoopRunInMode(mode, seconds, return_after_source_handled) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopStop` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoop` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":850,"byte_end":891,"line_start":24,"line_end":24,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoop, CFRunLoopRef);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":2427,"byte_end":2440,"line_start":81,"line_end":81,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"            CFRunLoopStop(self.0);","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":2427,"byte_end":2440,"line_start":81,"line_end":81,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"            CFRunLoopStop(self.0);","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"CFRunLoop","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopStop` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:81:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopStop(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoop` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopCopyCurrentMode` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":2564,"byte_end":2588,"line_start":87,"line_end":87,"column_start":30,"column_end":54,"is_primary":true,"text":[{"text":"            let string_ref = CFRunLoopCopyCurrentMode(self.0);","highlight_start":30,"highlight_end":54}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopCopyCurrentMode` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:87:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let string_ref = CFRunLoopCopyCurrentMode(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopContainsTimer` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":2925,"byte_end":2947,"line_start":98,"line_end":98,"column_start":18,"column_end":40,"is_primary":true,"text":[{"text":"        unsafe { CFRunLoopContainsTimer(self.0, timer.0, mode) != 0 }","highlight_start":18,"highlight_end":40}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopContainsTimer` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:98:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFRunLoopContainsTimer(self.0, timer.0, mode) != 0 }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopAddTimer` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopTimer` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3089,"byte_end":3106,"line_start":103,"line_end":103,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"            CFRunLoopAddTimer(self.0, timer.0, mode);","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3089,"byte_end":3106,"line_start":103,"line_end":103,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"            CFRunLoopAddTimer(self.0, timer.0, mode);","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":"CFRunLoopTimer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopAddTimer` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:103:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopAddTimer(self.0, timer.0, mode);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopTimer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopTimer` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopRemoveTimer` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopTimer` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3255,"byte_end":3275,"line_start":109,"line_end":109,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"            CFRunLoopRemoveTimer(self.0, timer.0, mode);","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3255,"byte_end":3275,"line_start":109,"line_end":109,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"            CFRunLoopRemoveTimer(self.0, timer.0, mode);","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":"CFRunLoopTimer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopRemoveTimer` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:109:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopRemoveTimer(self.0, timer.0, mode);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopTimer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopTimer` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopContainsSource` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3425,"byte_end":3448,"line_start":114,"line_end":114,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"        unsafe { CFRunLoopContainsSource(self.0, source.0, mode) != 0 }","highlight_start":18,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopContainsSource` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:114:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFRunLoopContainsSource(self.0, source.0, mode) != 0 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopAddSource` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopSource` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5115,"byte_end":5168,"line_start":173,"line_end":173,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3594,"byte_end":3612,"line_start":119,"line_end":119,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            CFRunLoopAddSource(self.0, source.0, mode);","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3594,"byte_end":3612,"line_start":119,"line_end":119,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            CFRunLoopAddSource(self.0, source.0, mode);","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"CFRunLoopSource","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopAddSource` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:119:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopAddSource(self.0, source.0, mode);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopSource`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopSource` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopRemoveSource` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopSource` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5115,"byte_end":5168,"line_start":173,"line_end":173,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopSource, CFRunLoopSourceRef);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3765,"byte_end":3786,"line_start":125,"line_end":125,"column_start":13,"column_end":34,"is_primary":true,"text":[{"text":"            CFRunLoopRemoveSource(self.0, source.0, mode);","highlight_start":13,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3765,"byte_end":3786,"line_start":125,"line_end":125,"column_start":13,"column_end":34,"is_primary":true,"text":[{"text":"            CFRunLoopRemoveSource(self.0, source.0, mode);","highlight_start":13,"highlight_end":34}],"label":null,"suggested_replacement":"CFRunLoopSource","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopRemoveSource` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:125:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopRemoveSource(self.0, source.0, mode);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopSource`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopSource` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopContainsObserver` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopObserver` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5432,"byte_end":5489,"line_start":186,"line_end":186,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3943,"byte_end":3968,"line_start":130,"line_end":130,"column_start":18,"column_end":43,"is_primary":true,"text":[{"text":"        unsafe { CFRunLoopContainsObserver(self.0, observer.0, mode) != 0 }","highlight_start":18,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":3943,"byte_end":3968,"line_start":130,"line_end":130,"column_start":18,"column_end":43,"is_primary":true,"text":[{"text":"        unsafe { CFRunLoopContainsObserver(self.0, observer.0, mode) != 0 }","highlight_start":18,"highlight_end":43}],"label":null,"suggested_replacement":"CFRunLoopObserver","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopContainsObserver` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:130:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFRunLoopContainsObserver(self.0, observer.0, mode) != 0 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopObserver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopObserver` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopAddObserver` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopObserver` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5432,"byte_end":5489,"line_start":186,"line_end":186,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4122,"byte_end":4142,"line_start":135,"line_end":135,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"            CFRunLoopAddObserver(self.0, observer.0, mode);","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4122,"byte_end":4142,"line_start":135,"line_end":135,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"            CFRunLoopAddObserver(self.0, observer.0, mode);","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":"CFRunLoopObserver","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopAddObserver` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:135:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopAddObserver(self.0, observer.0, mode);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopObserver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopObserver` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopRemoveObserver` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopObserver` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5432,"byte_end":5489,"line_start":186,"line_end":186,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopObserver, CFRunLoopObserverRef);","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4303,"byte_end":4326,"line_start":141,"line_end":141,"column_start":13,"column_end":36,"is_primary":true,"text":[{"text":"            CFRunLoopRemoveObserver(self.0, observer.0, mode);","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4303,"byte_end":4326,"line_start":141,"line_end":141,"column_start":13,"column_end":36,"is_primary":true,"text":[{"text":"            CFRunLoopRemoveObserver(self.0, observer.0, mode);","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":"CFRunLoopObserver","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopRemoveObserver` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:141:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CFRunLoopRemoveObserver(self.0, observer.0, mode);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopObserver`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopObserver` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopTimerGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4475,"byte_end":4498,"line_start":147,"line_end":147,"column_start":50,"column_end":73,"is_primary":true,"text":[{"text":"impl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);","highlight_start":50,"highlight_end":73}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopTimerGetTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:147:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef, CFRunLoopTimerGetTypeID);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopTimerCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":2101,"byte_end":2122,"line_start":63,"line_end":63,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        pub struct $ty($raw);","highlight_start":9,"highlight_end":30}],"label":"similarly named tuple struct `CFRunLoopTimer` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4373,"byte_end":4424,"line_start":146,"line_end":146,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"declare_TCFType!(CFRunLoopTimer, CFRunLoopTimerRef);","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_TCFType!","def_site_span":{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs","byte_start":1970,"byte_end":1998,"line_start":57,"line_end":57,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! declare_TCFType {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4819,"byte_end":4839,"line_start":159,"line_end":159,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"            let timer_ref = CFRunLoopTimerCreate(","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a tuple struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":4819,"byte_end":4839,"line_start":159,"line_end":159,"column_start":29,"column_end":49,"is_primary":true,"text":[{"text":"            let timer_ref = CFRunLoopTimerCreate(","highlight_start":29,"highlight_end":49}],"label":null,"suggested_replacement":"CFRunLoopTimer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopTimerCreate` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:159:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let timer_ref = CFRunLoopTimerCreate(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a tuple struct with a similar name exists: `CFRunLoopTimer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/lib.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct $ty($raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named tuple struct `CFRunLoopTimer` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopSourceGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5234,"byte_end":5258,"line_start":177,"line_end":177,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    CFRunLoopSourceGetTypeID","highlight_start":5,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopSourceGetTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:177:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopSourceGetTypeID\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFRunLoopObserverGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs","byte_start":5559,"byte_end":5585,"line_start":190,"line_end":190,"column_start":5,"column_end":31,"is_primary":true,"text":[{"text":"    CFRunLoopObserverGetTypeID","highlight_start":5,"highlight_end":31}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFRunLoopObserverGetTypeID` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/runloop.rs:190:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CFRunLoopObserverGetTypeID\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFSetGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":926,"byte_end":940,"line_start":29,"line_end":29,"column_start":35,"column_end":49,"is_primary":true,"text":[{"text":"impl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);","highlight_start":35,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFSetGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:29:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFSet<T>, CFSetRef, CFSetGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFSetCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":1275,"byte_end":1286,"line_start":40,"line_end":40,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"            let set_ref = CFSetCreate(","highlight_start":27,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFSetCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:40:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let set_ref = CFSetCreate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFSetGetCount` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs","byte_start":1644,"byte_end":1657,"line_start":54,"line_end":54,"column_start":18,"column_end":31,"is_primary":true,"text":[{"text":"        unsafe { CFSetGetCount(self.0) as usize }","highlight_start":18,"highlight_end":31}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFSetGetCount` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/set.rs:54:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFSetGetCount(self.0) as usize }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":921,"byte_end":938,"line_start":28,"line_end":28,"column_start":38,"column_end":55,"is_primary":true,"text":[{"text":"impl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);","highlight_start":38,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:28:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFString, CFStringRef, CFStringGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringGetCStringPtr` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":1542,"byte_end":1563,"line_start":51,"line_end":51,"column_start":28,"column_end":49,"is_primary":true,"text":[{"text":"            let c_string = CFStringGetCStringPtr(cf_str.0, kCFStringEncodingUTF8);","highlight_start":28,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringGetCStringPtr` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:51:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let c_string = CFStringGetCStringPtr(cf_str.0, kCFStringEncodingUTF8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringGetBytes` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":1966,"byte_end":1982,"line_start":60,"line_end":60,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"                CFStringGetBytes(","highlight_start":17,"highlight_end":33}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringGetBytes` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:60:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CFStringGetBytes(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringGetBytes` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":2594,"byte_end":2610,"line_start":78,"line_end":78,"column_start":37,"column_end":53,"is_primary":true,"text":[{"text":"                let chars_written = CFStringGetBytes(","highlight_start":37,"highlight_end":53}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringGetBytes` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:78:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let chars_written = CFStringGetBytes(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringCreateWithBytes` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":3826,"byte_end":3849,"line_start":119,"line_end":119,"column_start":30,"column_end":53,"is_primary":true,"text":[{"text":"            let string_ref = CFStringCreateWithBytes(","highlight_start":30,"highlight_end":53}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringCreateWithBytes` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:119:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let string_ref = CFStringCreateWithBytes(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringCreateWithBytesNoCopy` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":4391,"byte_end":4420,"line_start":135,"line_end":135,"column_start":30,"column_end":59,"is_primary":true,"text":[{"text":"            let string_ref = CFStringCreateWithBytesNoCopy(","highlight_start":30,"highlight_end":59}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringCreateWithBytesNoCopy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:135:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let string_ref = CFStringCreateWithBytesNoCopy(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringGetLength` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":4857,"byte_end":4874,"line_start":150,"line_end":150,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"        unsafe { CFStringGetLength(self.0) }","highlight_start":18,"highlight_end":35}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringGetLength` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:150:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFStringGetLength(self.0) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFStringCreateWithBytesNoCopy` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs","byte_start":5018,"byte_end":5047,"line_start":157,"line_end":157,"column_start":24,"column_end":53,"is_primary":true,"text":[{"text":"            let temp = CFStringCreateWithBytesNoCopy(","highlight_start":24,"highlight_end":53}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFStringCreateWithBytesNoCopy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/string.rs:157:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let temp = CFStringCreateWithBytesNoCopy(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFTimeZoneGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":849,"byte_end":868,"line_start":26,"line_end":26,"column_start":42,"column_end":61,"is_primary":true,"text":[{"text":"impl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);","highlight_start":42,"highlight_end":61}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFTimeZoneGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:26:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFTimeZone, CFTimeZoneRef, CFTimeZoneGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFTimeZoneCopyDefault` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":1014,"byte_end":1035,"line_start":32,"line_end":32,"column_start":26,"column_end":47,"is_primary":true,"text":[{"text":"            let tz_ref = CFTimeZoneCopyDefault();","highlight_start":26,"highlight_end":47}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFTimeZoneCopyDefault` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:32:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let tz_ref = CFTimeZoneCopyDefault();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFTimeZoneCreateWithTimeIntervalFromGMT` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":1241,"byte_end":1280,"line_start":42,"line_end":42,"column_start":26,"column_end":65,"is_primary":true,"text":[{"text":"            let tz_ref = CFTimeZoneCreateWithTimeIntervalFromGMT(kCFAllocatorDefault, interval);","highlight_start":26,"highlight_end":65}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFTimeZoneCreateWithTimeIntervalFromGMT` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:42:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let tz_ref = CFTimeZoneCreateWithTimeIntervalFromGMT(kCFAllocatorDefault, interval);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFTimeZoneCopySystem` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":1474,"byte_end":1494,"line_start":50,"line_end":50,"column_start":26,"column_end":46,"is_primary":true,"text":[{"text":"            let tz_ref = CFTimeZoneCopySystem();","highlight_start":26,"highlight_end":46}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFTimeZoneCopySystem` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:50:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let tz_ref = CFTimeZoneCopySystem();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFTimeZoneGetSecondsFromGMT` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":1653,"byte_end":1680,"line_start":56,"line_end":56,"column_start":18,"column_end":45,"is_primary":true,"text":[{"text":"        unsafe { CFTimeZoneGetSecondsFromGMT(self.0, date.abs_time()) }","highlight_start":18,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFTimeZoneGetSecondsFromGMT` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:56:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFTimeZoneGetSecondsFromGMT(self.0, date.abs_time()) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFTimeZoneGetName` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs","byte_start":2306,"byte_end":2323,"line_start":73,"line_end":73,"column_start":48,"column_end":65,"is_primary":true,"text":[{"text":"        unsafe { CFString::wrap_under_get_rule(CFTimeZoneGetName(self.0)) }","highlight_start":48,"highlight_end":65}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFTimeZoneGetName` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/timezone.rs:73:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { CFString::wrap_under_get_rule(CFTimeZoneGetName(self.0)) }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":880,"byte_end":894,"line_start":30,"line_end":30,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"impl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);","highlight_start":32,"highlight_end":46}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:30:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFURL, CFURLRef, CFURLGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLGetString` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":1080,"byte_end":1094,"line_start":36,"line_end":36,"column_start":65,"column_end":79,"is_primary":true,"text":[{"text":"            let string: CFString = TCFType::wrap_under_get_rule(CFURLGetString(self.0));","highlight_start":65,"highlight_end":79}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLGetString` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:36:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let string: CFString = TCFType::wrap_under_get_rule(CFURLGetString(self.0));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLCreateFromFileSystemRepresentation` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":1786,"byte_end":1825,"line_start":60,"line_end":60,"column_start":27,"column_end":66,"is_primary":true,"text":[{"text":"            let url_ref = CFURLCreateFromFileSystemRepresentation(","highlight_start":27,"highlight_end":66}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLCreateFromFileSystemRepresentation` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:60:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let url_ref = CFURLCreateFromFileSystemRepresentation(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLCreateWithFileSystemPath` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":2330,"byte_end":2359,"line_start":79,"line_end":79,"column_start":27,"column_end":56,"is_primary":true,"text":[{"text":"            let url_ref = CFURLCreateWithFileSystemPath(","highlight_start":27,"highlight_end":56}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLCreateWithFileSystemPath` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:79:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let url_ref = CFURLCreateWithFileSystemPath(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLGetFileSystemRepresentation` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":2857,"byte_end":2889,"line_start":94,"line_end":94,"column_start":26,"column_end":58,"is_primary":true,"text":[{"text":"            let result = CFURLGetFileSystemRepresentation(","highlight_start":26,"highlight_end":58}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLGetFileSystemRepresentation` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:94:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let result = CFURLGetFileSystemRepresentation(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLGetString` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":3383,"byte_end":3397,"line_start":110,"line_end":110,"column_start":47,"column_end":61,"is_primary":true,"text":[{"text":"        unsafe { TCFType::wrap_under_get_rule(CFURLGetString(self.0)) }","highlight_start":47,"highlight_end":61}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLGetString` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:110:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { TCFType::wrap_under_get_rule(CFURLGetString(self.0)) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLCopyFileSystemPath` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":3557,"byte_end":3580,"line_start":115,"line_end":115,"column_start":45,"column_end":68,"is_primary":true,"text":[{"text":"            TCFType::wrap_under_create_rule(CFURLCopyFileSystemPath(","highlight_start":45,"highlight_end":68}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLCopyFileSystemPath` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:115:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            TCFType::wrap_under_create_rule(CFURLCopyFileSystemPath(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFURLCopyAbsoluteURL` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs","byte_start":3772,"byte_end":3792,"line_start":123,"line_end":123,"column_start":50,"column_end":70,"is_primary":true,"text":[{"text":"        unsafe { TCFType::wrap_under_create_rule(CFURLCopyAbsoluteURL(self.as_concrete_TypeRef())) }","highlight_start":50,"highlight_end":70}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFURLCopyAbsoluteURL` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/url.rs:123:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { TCFType::wrap_under_create_rule(CFURLCopyAbsoluteURL(self.as_concrete_TypeRef())) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFUUIDGetTypeID` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":775,"byte_end":790,"line_start":27,"line_end":27,"column_start":34,"column_end":49,"is_primary":true,"text":[{"text":"impl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);","highlight_start":34,"highlight_end":49}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFUUIDGetTypeID` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:27:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_TCFType!(CFUUID, CFUUIDRef, CFUUIDGetTypeID);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function, tuple struct or tuple variant `CFUUIDCreate` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs","byte_start":928,"byte_end":940,"line_start":34,"line_end":34,"column_start":28,"column_end":40,"is_primary":true,"text":[{"text":"            let uuid_ref = CFUUIDCreate(kCFAllocatorDefault);","highlight_start":28,"highlight_end":40}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `CFUUIDCreate` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/nicklopacki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/core-foundation-0.9.4/src/uuid.rs:34:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let uuid_ref = CFUUIDCreate(kCFAllocatorDefault);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 443 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 443 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0405, E0412, E0425, E0432, E0433, E0514.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0405, E0412, E0425, E0432, E0433, E0514.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0405`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0405`.\u001b[0m\n"}
